{"meta":{"title":"AIR","subtitle":"A research team studying artificial intelligence","description":"AIR","author":"AIR@USC","url":"http://uscair.club","root":"/"},"pages":[{"title":"所有分类","date":"2020-02-06T08:16:28.355Z","updated":"2020-02-06T08:16:28.355Z","comments":true,"path":"categories/index.html","permalink":"http://uscair.club/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-02-06T08:17:31.100Z","updated":"2020-02-06T08:17:31.100Z","comments":true,"path":"tags/index.html","permalink":"http://uscair.club/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-02-06T08:22:15.191Z","updated":"2020-02-06T08:22:15.191Z","comments":true,"path":"about/index.html","permalink":"http://uscair.club/about/index.html","excerpt":"","text":"AIR@USCContact Address: the University of South China - 28 Changsheng West Road- Hunan, China E-mail: airusc@foxmail.com QQ：3458038461 Blog: https://uscair.club Introduction:A professional team studying artificial intelligence and robotics Instructor:Dr. Mao Yu Honor One First Prize &amp; Two Third Prizes, [The 15th Hunan University Student Computer Program Design Competition] Aug. 2019 One Second Prize &amp; Three Third Prizes,[“Soft Silver Robot Cup” China robot skill competition] Dec. 2018 EssayGrade 16 Qiu Zhongxi published EI paper as first author"}],"posts":[{"title":"机器学习系列（六）——梯度下降解释及其技巧","slug":"机器学习系列（六）——梯度下降解释及其技巧","date":"2020-03-08T14:39:29.118Z","updated":"2020-03-08T14:39:29.118Z","comments":true,"path":"2020/03/08/机器学习系列（六）——梯度下降解释及其技巧/","link":"","permalink":"http://uscair.club/2020/03/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E8%A7%A3%E9%87%8A%E5%8F%8A%E5%85%B6%E6%8A%80%E5%B7%A7/","excerpt":"","text":"在训练机器学习模型寻找最优函数时，梯度下降（Gradient Descent）是最常用的优化（optimization）方法。在给定一组初始参数θ0时，梯度下降算法能够顺着损失函数下降最快的方向逐步逼近最低点，也就是最佳参数θ∗的位置。那梯度下降算法为什么work呢？为什么梯度的反方向就是损失函数下降最快的方向呢？ 梯度下降算法解释首先回顾一下梯度下降算法是如何工作的，我们的目标是找到θ∗： 其中LL是损失函数，梯度下降算法步骤如下： ​ 1.随机选取一组初始参数θ0。​ 2.计算损失函数在该点的偏导数∇L(θ^(n−1))，也就是梯度。​ 3.更新参数θn=θn−1−η∇L(θn−1)。​ 4.重复2，3步骤，直至梯度不再下降（小于某个阈值范围）。上面第3步中可以看到，每次我们顺着梯度的反方向更新θ，其中η是学习速率，代表了每次更新的步伐大小。在只含有两个未知参数时，梯度下降的直观过程如下图： 下面根据李宏毅课程的思路对梯度下降的原理进行解释。同样假设只包含两个参数θ1，θ2。随机给定一个初始点，在“目之所及”的范围内寻找损失函数下降最快的方向，如下图 θ0是随机给定的初始点，红色圆圈是“目之所及”的范围，现在的关键是如何找到圆圈范围内下降最快的方向，由泰勒展示（Taylor Series）:当函数h(x)在x=x0处是可微的，那么h(x)可以写成 当x非常接近x0时，上式中的平方项等更高次项的值将无限接近于0，此时h(x)可以约等于 多变量泰勒展示同样成立，只需对各个变量分别求偏导数 因此，在任意点(a,b)处我们可以将损失函数用泰勒展示展开，并且当红色圆圈足够小时，圆圈内的函数值可以近似为 经过上面的推导，我们很好的解释了为什么要沿着梯度的反方向更新参数，并且也解释了学习速率ηη不能设置过大，否则L(θ)≈s+uΔθ1+vΔθ2将不再成立。 梯度下降的一些技巧1、学习速率（learning rate）学习速率是最需要调整的一个超参数，太小会使得训练速度过慢；太大会使得训练无法收敛，因此需要很小心的调节学习速率η。 我们可以绘出损失函数的曲线图，如上图左边所示，红色的学习速率最合适，蓝色的太小，绿色的偏大，黄色则非常大。但是当参数数目很多时将无法可视化损失函数曲线，这时我们可以绘制出随迭代次数增加损失值变化曲线，如上图右边所示。如果损失下降很慢（蓝色），可能学习速率过低；如果损失开始下降很快，但很快稳定在一个较大的值（绿色），可能学习速率偏大了；如果损失不降返升（黄色），学习速率可能过大了；只有损失以恰当的速度降到很小（红色），才是最佳学习速率。 2、Adagrad 下面尝试对Adagrad做一个解释，首先需要考虑的是：梯度越大，距离最低点越远，步伐越大？还是以两参数为例： 3、随机梯度下降（Stochastic Gradient Descent）or 小批量梯度下降（Mini-Batch Gradient Descent）常规的梯度下降也就是批量梯度下降，是在整个数据集上求偏导，在该方法中，每次更新我们需要计算整个数据集中每个样本点的误差，因此速度会比较慢，对于很大的数据集，内存可能无法容纳以至无法使用，因此在实际中一般使用随机梯度下降（Stochastic Gradient Descent）或者小批量梯度下降（Mini-Batch Gradient Descent）。随机梯度下降（Stochastic Gradient Descent）的每次更新，是对数据集中的每个样本点计算损失函数，这样对于m个样本的数据集，批量梯度下降更新一次，SGD可以更新m次，虽然每次只考虑一个样本点，可能存在较大的波动，但最终都会收敛。小批量梯度下降（Mini-Batch Gradient Descent）是批量梯度下降和随机梯度下降的折中，每次更新，对数据集中部分数据计算损失函数。 4、特征缩放（Feature Scaling）特征缩放是指将每个特征的取值限定在相同的范围 为什么要将每个特征的取值限定在相同范围呢？看下面的例子： 图中左边x1的取值范围是x2的百分之一，当w2稍有变化，y值将变化很大，因此损失函数也将变化很大，也就是说损失函数在w2方向下降很快，导致损失函数等高线呈扁平的椭圆形，这种情况下不用Adagrad将比较难处理，两个方向上需要不同的学习率。但经过特征缩放后，所有特征的取值范围都是统一的，损失函数等高线呈规整的圆形，梯度下降效率将比较高。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Wonder"}},{"title":"计算机网络原理学习（一）","slug":"计算机网络原理（一）","date":"2020-03-08T14:16:18.283Z","updated":"2020-03-08T14:16:18.283Z","comments":true,"path":"2020/03/08/计算机网络原理（一）/","link":"","permalink":"http://uscair.club/2020/03/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"小科普：调制解调器是Modulator（调制器）与Demodulator（解调器）的简称，中文称为调制解调器，根据Modem的谐音，亲昵地称之为“猫”，是一种能够实现通信所需的调制和解调功能的电子设备。一般由调制器和解调器组成。在发送端，将计算机串行口产生的数字信号调制成可以通过电话线传输的模拟信号；在接收端，调制解调器把输入计算机的模拟信号转换成相应的数字信号，送入计算机接口。在个人计算机中，调制解调器常被用来与别的计算机交换数据和程序，以及访问联机信息服务程序等。有“猫”才能上网，现代的一些路由器把“猫”的功能并与了一身。 一、互联网的成形 互联网服务提供者ISP（InternetService Provider）从互联网管理机构申请很多IP地址，同时拥有通信线路以及路由器等设备，个人可以只要向某个ISP交纳规定费用，就可以从ISP获取IP地址使用权，并通过ISP接入到互联网。ISP彼此还可以通过IXP进行交换分组，这样就避免了同等级的ISP要进行交换分组要到高一级ISP在到同一级ISP的繁琐步骤。 RFC（Request For Comments）记录了互联网的制定标准——互联网标准，大部分RFC可以在网络上进行下载。 二、互联网的组成 互联网的组成分为了俩个部分：边缘部分（用户直接使用，用来进行通信（传送数据、音频或视频）和资源共享）和核心部分（大量网络和连接网络的路由器，用来为边缘部分提供服务）（1）边缘部分 边缘部分就是连接在互联网上的所有主机他们被称为端系统（端表示为互联网的末端）。 网络边缘的端系统之间的通信方式可以划分为俩大类：客户-服务器（C/S）和对等方式（P2P，peer topeer 方式） 客户-服务器：客户主动发出响应（客户程序必须知道服务器程序的地址），服务器被动接收响应（可同时处理多个远地或本地客户的请求，不需要知道客户程序的地址）。服务器为客户提供服务，这便要求服务器是一直运行的可以随时接收客户发出的响应。 对等方式（P2P）：俩个双方可以进行平等的、对等连接通信。可以看成俩者既是服务器又是用户。 （2）互联网的核心部分 向网络边缘中的大量主机提供连通性，使边缘部分中的任何一台主机能够向其他主机通信。在网络核心部分中其特殊作用的是路由器（一种专用计算机，实现分组交换），其任务是转发收到的分组。 [1]电路交换： 在电话问世时使用的是电路交换：首先是通过电话线使用户进行数据交流，这样十分的浪费资源（需要的电话线数量太多）于是用电话交换机将电话连接了起来（电路交换），交换：按照某种方式动态地分配传输线路的资源。用户进行通信时必须经过建立连接——通话——释放连接。三个步骤称为电路交换。电路交换的一个重要特点就是在通话的全部时间内，通话的俩个用户始终占用端到端的通信资源。使用电路交换线路传输效率往往很低。 [2]分组交换： 把一个报文（要发送的整块数据）划分为几个分组后进行传送。在每一个数据段前面，加上一些由必要的控制信息组成的首部，就构成了一个分组。分组称为“包”，分组的首部称为“包头”（包含了目的地址和源地址），有了包头每一个分组才能在互联网中独立选择传输路径，正确的交付到传输终点。路由器就是用来进行分组交换的，它也是计算机。可通过路由器对线路进行选择，一条通信线路被占就走另外一条线路直到到达目标机。 电路交换——整个报文的比特流连续地从源点直达终点，好像在一个管道中传送。 报文交换——整个报文先传送 到相邻结点，全部存储下来后查找转发表，转发到下一个结点。 分组交换——单个分组(这只是整个报文的一部分)传送到相邻结点，存储下来后查找转发表，转发到下一个结点。","categories":[{"name":"网络原理","slug":"网络原理","permalink":"http://uscair.club/categories/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"网络原理","slug":"网络原理","permalink":"http://uscair.club/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}],"author":{"name":"Page"}},{"title":"深度学习对数据集的预处理","slug":"深度学习对数据集的预处理","date":"2020-03-06T16:00:00.000Z","updated":"2020-03-06T16:00:00.000Z","comments":true,"path":"2020/03/07/深度学习对数据集的预处理/","link":"","permalink":"http://uscair.club/2020/03/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AF%B9%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86/","excerpt":"","text":"深度学习对数据集的预处理因为在使用神经网络的时候常常采用的图片数据集，常常是一个尺寸相同的，但是我们下载来的数据集往往尺寸不一定相同。所以我们应该转化为相同尺寸的数据集。笔者首先考虑过用cv2.resize()把图片变为等尺寸的，在同torch.form_numpy()转化成tensor来出来，但是resize改变了图片等的比例，所以在神经网络中的拟合出的结果可能不是我们所希望的。 所以我们采用一下的方法： 首先设置一个图片的目标尺寸 把图片以最短边按比例缩小 然后随机剪裁为目标尺寸 代码环境：python3.7.4，pytorch1.4.0，jupyter notebook 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270#!/usr/bin/env python# coding: utf-8# In[1]:from __future__ import print_function,divisionimport osimport torchimport pandas as pdfrom skimage import io,transformimport numpy as npimport matplotlib.pyplot as pltfrom torch.utils.data import Dataset,DataLoaderfrom torchvision import transforms,utilsimport warnings# In[2]:warnings.filterwarnings('ignore')# In[3]:plt.ion()# In[4]:landmarks_frame=pd.read_csv('data/faces/face_landmarks.csv')# https://download.pytorch.org/tutorial/faces.zip 数据集下载地址# 把数据放在data文件夹下n=65img_name=landmarks_frame.iloc[n,0]landmarks=landmarks_frame.iloc[n,1:]landmarks=np.asarray(landmarks)landmarks=landmarks.astype('float').reshape(-1,2)# 转化成n行2列的形式print('Image name: &#123;&#125;'.format(img_name))print('Landmarks shape: &#123;&#125;'.format(landmarks.shape))print('First 4 Landmarks: &#123;&#125;'.format(landmarks[:4]))# In[5]:def show_landmarks(image, landmarks): plt.imshow(image) plt.scatter(landmarks[:,0],landmarks[:,1],s=10,marker='.',c='red') plt.pause(0.001)# In[6]:plt.figure()show_landmarks(io.imread(os.path.join('data/faces/', img_name)), landmarks)plt.show()# In[7]:class FaceLandmarksDataset(Dataset): def __init__(self,csv_file,root_dir,transform=None): ''' :param csv_file: 带注释带csv文件路径 :param root_dir: 所有图像的目录 :param transform: (可选)在一个样本上转换 ''' self.landmarks_frame=pd.read_csv(csv_file) self.root_dir=root_dir self.transform=transform def __len__(self): return len(self.landmarks_frame) def __getitem__(self, idx): if torch.is_tensor(idx): idx=idx.tolist() # 将张量作为（嵌套的）列表返回 img_name=os.path.join(self.root_dir, self.landmarks_frame.iloc[idx,0]) # 图片地址 image=io.imread(img_name) landmarks=self.landmarks_frame.iloc[idx,1:] # 图片的标记点 landmarks=np.array([landmarks]) landmarks=landmarks.astype('float').reshape(-1,2) sample=&#123;'image':image,'landmarks':landmarks&#125; if self.transform: sample=self.transform(sample) # 转置 return sample # In[8]:face_dataset=FaceLandmarksDataset(csv_file='data/faces/face_landmarks.csv', root_dir='data/faces/')fig=plt.figure()for i in range(len(face_dataset)): sample=face_dataset[i] print(i,sample['image'].shape,sample['landmarks'].shape) ax=plt.subplot(1,4,i+1) plt.tight_layout() ax.set_title('sample #&#123;&#125;'.format(i)) ax.axis('off') show_landmarks(**sample) # dict输入 if i==3: # 展示前4组图片 plt.show() break # In[9]:class Rescale(object): \"\"\" 把图片缩放为相同的大小 如果为元组，则输出与output_size匹配。 如果为int，则将较小的图像边缘与output_size匹配，并保持宽高比相同。 参数： output_size:输出大小 \"\"\" def __init__(self, output_size): assert isinstance(output_size,(int,tuple)) self.output_size=output_size def __call__(self, sample): image, landmarks = sample['image'], sample['landmarks'] h, w = image.shape[:2] if isinstance(self.output_size, int): # 如果是整型，将较小的图像边缘与output_size匹配，并保持宽高比相同 if h &gt; w: new_h,new_w=self.output_size*h/w,self.output_size else: new_h,new_w=self.output_size,self.output_size*w/h else: new_h, new_w = self.output_size new_h, new_w = int(new_h),int(new_w) img = transform.resize(image, (new_h, new_w)) # h and w are swapped for landmarks because for images, # x and y axes are axis 1 and 0 respectively landmarks = landmarks*[new_w / w, new_h / h] # 同时把标记按比例缩小 return &#123;'image': img, 'landmarks': landmarks&#125;# In[10]:class RandomCrop(object): \"\"\" 随机裁剪图片 Args: output_size (tuple or int):期望的输入如果是整形则裁剪成正方形 \"\"\" def __init__(self, output_size): assert isinstance(output_size, (int, tuple)) if isinstance(output_size, int): self.output_size = (output_size, output_size) else: assert len(output_size) == 2 self.output_size = output_size def __call__(self, sample): image, landmarks = sample['image'], sample['landmarks'] h, w = image.shape[:2] new_h, new_w = self.output_size top = np.random.randint(0, h - new_h) # 在0到h-new_h之间产生随机数 left = np.random.randint(0, w - new_w) image = image[top: top + new_h, left: left + new_w] # 随机剪裁的范围 landmarks = landmarks - [left, top] return &#123;'image': image, 'landmarks': landmarks&#125;# In[11]:class ToTensor(object): \"\"\" 把darray转成tensor \"\"\" def __call__(self, sample): image, landmarks = sample['image'], sample['landmarks'] # numpy image: H x W x C # torch image: C X H X W image = image.transpose((2, 0, 1)) # 把numpy的格式转化成tensor return &#123;'image': torch.from_numpy(image), 'landmarks': torch.from_numpy(landmarks)&#125;# In[12]:scale = Rescale(256)crop = RandomCrop(128)composed = transforms.Compose([Rescale(256), RandomCrop(224)])# 在每一个样本图片上应用fig = plt.figure()sample = face_dataset[65]for i, tsfrm in enumerate([scale, crop, composed]): transformed_sample = tsfrm(sample) ax = plt.subplot(1, 3, i + 1) plt.tight_layout() ax.set_title(type(tsfrm).__name__) show_landmarks(**transformed_sample)plt.show()# In[13]:transformed_dataset=FaceLandmarksDataset(csv_file='data/faces/face_landmarks.csv', root_dir='data/faces/', transform=transforms.Compose([Rescale(256), RandomCrop(224), ToTensor()]))for i in range(len(transformed_dataset)): sample=transformed_dataset[i] print(i,sample['image'].size(),sample['landmarks'].size()) if i==3: break# In[14]:dataloader = DataLoader(transformed_dataset, batch_size=4, shuffle=True, num_workers=4) # 用4个进程来加载数据每个批次4个并洗牌# In[15]:def show_landmarks_batch(sample_batched): # 在一组图片中使用标记展示图片 images_batch,landmarks_batch=sample_batched['image'],sample_batched['landmarks'] batch_size=len(images_batch) im_size=images_batch.size(2) grid_border_size=2 grid=utils.make_grid(images_batch) plt.imshow(grid.numpy().transpose((1,2,0))) for i in range(batch_size): plt.scatter(landmarks_batch[i,:,0].numpy()+i*im_size+(i+1)*grid_border_size, landmarks_batch[i,:,1].numpy()+grid_border_size, s=10, marker='.', c='red') plt.title('Batch from dataloader')# In[16]:for i_batch, sample_batched in enumerate(dataloader): print(i_batch,sample_batched['image'].size(),sample_batched['landmarks'].size()) if i_batch==3: plt.figure() show_landmarks_batch(sample_batched) plt.axis('off') plt.ioff() plt.show() break","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://uscair.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Pytorh","slug":"Pytorh","permalink":"http://uscair.club/tags/Pytorh/"},{"name":"数据集预处理","slug":"数据集预处理","permalink":"http://uscair.club/tags/%E6%95%B0%E6%8D%AE%E9%9B%86%E9%A2%84%E5%A4%84%E7%90%86/"}],"author":{"name":"Gowi"}},{"title":"机器学习系列（五）——训练集、测试集、验证集与模型选择","slug":"机器学习系列（五）——训练集、测试集、验证集与模型选择","date":"2020-03-01T14:21:57.759Z","updated":"2020-03-01T14:21:57.759Z","comments":true,"path":"2020/03/01/机器学习系列（五）——训练集、测试集、验证集与模型选择/","link":"","permalink":"http://uscair.club/2020/03/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%AE%AD%E7%BB%83%E9%9B%86%E3%80%81%E6%B5%8B%E8%AF%95%E9%9B%86%E3%80%81%E9%AA%8C%E8%AF%81%E9%9B%86%E4%B8%8E%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9/","excerpt":"","text":"在机器学习过程中，为了找到泛化性能最好的那个函数，我们需要确定两方面的参数：1、假设函数参数，也就是我们通常所说的w和b，这类参数可以通过各种最优化算法自动求得。2、模型参数，比如多项式回归中的多项式次数，规则化参数λ等，这些参数被称为超参数，一般在模型训练之前通过手工指定（当然也可以采用网格法等算法进行寻优）。确定模型超参数的过程称为模型选择。 模型选择借用吴恩达机器学习课程中的一页PPT，如下图： 现在我们要确定多项式回归的次数d，我们手工指定d取值1到10，然后在训练集上训练模型，分别找出了最优参数θ(1),θ(2),⋯,θ(10)θ(1),θ(2),⋯,θ(10)，接着在测试集上对模型性能进行评估，得到测试误差Jtest(θ(1)),Jtest(θ(2)),⋯,Jtest(θ(10))，选择测试误差最小的那个作为最优模型，假设我们选择了d=5d=5的那个模型θ0+θ1x+⋯+θ5x^5。现在问题来了，我们要怎么去评价这个模型的泛化性能呢？仍然采用测试误差吗？如果我们采用测试误差作为度量，那我们是不是可以继续调整d的取值呢，直至测试误差降到最低，但是此时的模型我们能相信吗？显然是不能相信的，因为我们已经提前窥见到了测试数据，我们的超参数都是围绕更好的拟合测试数据而设定的，Jtest(θ)因此很有可能是泛化误差的一个最优估计。问题就出在我们将测试数据多次使用，违背了测试数据仅仅只是用来评估最优函数的泛化性能的原则。 为了解决这个问题，我们在训练集中单独划分出一块，作为模型选择的依据，我们把这部分数据称为验证集，现在我们的数据集由之前的训练集和测试集两部分组成变成了训练集，验证集和测试集三部分组成。 训练集：用于训练模型，找出最佳的w和b。 验证集：用以确定模型超参数，选出最优模型。 测试集：仅用于对训练好的最优函数进行性能评估。 训练集、验证集和测试集分工明确，各施其职，切不可互相取而代之。特别是不能混淆验证集和测试集，下面用一个表整理下两者的区别： 区别 验证集 测试集 作用 确定模型超参数 仅用于对训练好的最优函数进行性能评估 是否用于训练 否（在选出最优模型后，需要将验证集也放入训练集一起训练最优函数） 否 使用次数 多次使用，每次更新超参数后都要用验证集对模型性能进行验证 仅在最后使用一次 再强调一下：对最终学习得到的函数进行性能评估的数据叫作测试集，必须保证测试集完全独立，直到模型调整和参数训练全部完成前应该将测试集进行封存，以任何形式使用测试集中的信息都是一种窥探。所以，此时机器学习的全过程如下： 确定模型的一组超参数用训练集训练该模型，找到使损失函数最小的最优函数。在验证集上对最优函数的性能进行度量。重复1、2、3步，直到搜索完指定的超参数组合。选择在验证集上误差最小的模型，并合并训练集和验证集作为整体训练模型，找到最优函数。在测试集上对最优函数的泛化性能进行度量。最后，我们都知道同一模型在不同训练集上学得的函数往往不同，那我们怎样保证选出的模型和函数就是最好的呢？而不是刚好符合当前数据划分的一个特例呢？可以采用交叉验证（Cross Validation）法，其基本思路如下：将训练集划分为K份，每次采用其中K-1份作为训练集，另外一份作为验证集，验证集上K次误差的平均作为该模型的误差。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Wonder"}},{"title":"前馈神经网络","slug":"前馈神经网络","date":"2020-02-29T16:00:00.000Z","updated":"2020-02-29T16:00:00.000Z","comments":true,"path":"2020/03/01/前馈神经网络/","link":"","permalink":"http://uscair.club/2020/03/01/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","excerpt":"","text":"基本概念深度前馈神经网络也叫作多层感知机，是深度学习中最常用的模型。它包含输入层，隐含层和输出层三个部分。它的目的是为了实现输入到输出的映射。在前馈神经网络中，不同的神经元属于不同的层，每一层的神经元可以接受到前一层的神经元信号，并产生信号输出到下一层。第0层叫做输入层，最后一层叫做输出层，中间的叫做隐藏层，整个网络中无反馈，信号从输入层到输出层单向传播，可用一个有用无环图表示。 下图为前馈神经网络图例子： 计算简略的看当只有单层神经网络时： 多层则以此类推。 偏置节点我们使用圆圈来表示神经网络的输入，标上“+1+1”的圆圈被称为”’偏置节点”’，也就是截距项。偏置的存在是为了更好地拟合数据","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"神经网络","slug":"神经网络","permalink":"http://uscair.club/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}],"author":{"name":"ffffff"}},{"title":"人工智能","slug":"不败顽童博主","date":"2020-02-28T16:00:00.000Z","updated":"2020-02-28T16:00:00.000Z","comments":true,"path":"2020/02/29/不败顽童博主/","link":"","permalink":"http://uscair.club/2020/02/29/%E4%B8%8D%E8%B4%A5%E9%A1%BD%E7%AB%A5%E5%8D%9A%E4%B8%BB/","excerpt":"","text":"人工智能的定义可以分为两部分，即“人工”和“智能”。“人工”比较好理解，争议性也不大。有时我们会要考虑什么是人力所能及制造的，或者人自身的智能程度有没有高到可以创造人工智能的地步，等等。但总的来说，“人工系统”就是通常意义下的人工系统。关于什么是“智能”，就问题多多了。这涉及到其它诸如意识（CONSCIOUSNESS）、自我（SELF）、思维（MIND）（包括无意识的思维（UNCONSCIOUS_MIND））等等问题。人唯一了解的智能是人本身的智能，这是普遍认同的观点。但是我们对我们自身智能的理解都非常有限，对构成人的智能的必要元素也了解有限，所以就很难定义什么是“人工”制造的“智能”了。因此人工智能的研究往往涉及对人的智能本身的研究。其它关于动物或其它人造系统的智能也普遍被认为是人工智能相关的研究课题。人工智能在计算机领域内，得到了愈加广泛的重视。并在机器人，经济政治决策，控制系统，仿真系统中得到应用。尼尔逊教授对人工智能下了这样一个定义：“人工智能是关于知识的学科――怎样表示知识以及怎样获得知识并使用知识的科学。”而另一个美国麻省理工学院的温斯顿教授认为：“人工智能就是研究如何使计算机去做过去只有人才能做的智能工作。”这些说法反映了人工智能学科的基本思想和基本内容。即人工智能是研究人类智能活动的规律，构造具有一定智能的人工系统，研究如何让计算机去完成以往需要人的智力才能胜任的工作，也就是研究如何应用计算机的软硬件来模拟人类某些智能行为的基本理论、方法和技术。人工智能是计算机学科的一个分支，二十世纪七十年代以来被称为世界三大尖端技术之一（空间技术、能源技术、人工智能）。也被认为是二十一世纪三大尖端技术（基因工程、纳米科学、人工智能）之一。这是因为近三十年来它获得了迅速的发展，在很多学科领域都获得了广泛应用，并取得了丰硕的成果，人工智能已逐步成为一个独立的分支，无论在理论和实践上都已自成一个系统。人工智能是研究使计算机来模拟人的某些思维过程和智能行为（如学习、推理、思考、规划等）的学科，主要包括计算机实现智能的原理、制造类似于人脑智能的计算机，使计算机能实现更高层次的应用。人工智能将涉及到计算机科学、心理学、哲学和语言学等学科。可以说几乎是自然科学和社会科学的所有学科，其范围已远远超出了计算机科学的范畴，人工智能与思维科学的关系是实践和理论的关系，人工智能是处于思维科学的技术应用层次，是它的一个应用分支。从思维观点看，人工智能不仅限于逻辑思维，要考虑形象思维、灵感思维才能促进人工智能的突破性的发展，数学常被认为是多种学科的基础科学，数学也进入语言、思维领域，人工智能学科也必须借用数学工具，数学不仅在标准逻辑、模糊数学等范围发挥作用，数学进入人工智能学科，它们将互相促进而更快地发展。","categories":[{"name":"人工智能","slug":"人工智能","permalink":"http://uscair.club/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"http://uscair.club/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}],"author":{"name":"不败顽童"}},{"title":"python语言程序设计（一）","slug":"基于python的文件操作","date":"2020-02-28T16:00:00.000Z","updated":"2020-02-28T16:00:00.000Z","comments":true,"path":"2020/02/29/基于python的文件操作/","link":"","permalink":"http://uscair.club/2020/02/29/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","excerpt":"","text":"文件的理解：-文件是数据的抽象和集合-文件是存储在辅助存储器上的数据序列-文件是数据存储的一种形式-文件展现形态：文本文件和二进制文件文本文件和二进制文件区别：-文件文件和二进制文件只是文件的展示方式-本质上，所有文件都是二进制形式存储-形式上，所有文件采用两种方式展示 文本文件-由单一特定编码组成的文件，如UTF-8编码-由于存在编码，也被看成是存储着的长字符串-适用于例如：.txt文件、.py文件等如：`其运行结果： 二进制文件-直接由比特0和1组成，没有统一字符编码-一般存在二进制0和1的组织结构，即文件格式-适用于例如：.png文件、.avi文件等如：其运行结果：不论是二进制文件还是文本文件，文件都是数据的抽象和集合 文件的打开方式：&lt;变量名&gt;=open(&lt;文件名&gt;,&lt;打开模式&gt;)文件名：文件路径和名称打开模式：文本or 二进制，读or 写其中打开模式又分为以下7种：‘r’：只读模式，默认值，如果文件不存在，返回FileNotFoundError。‘w’：覆盖写模式，文件不存在则创建，存在则完全覆盖。‘x’：创建写模式，文件不存在则创建，存在则返回FileExistsError。‘a’：追加写模式，文件不存在则创建，存在则在文件最后追加内容。‘b’：二进制文件模式。‘t’：文本文件模式，默认值。‘+’：与r/w/x/a一同使用，在原功能基础上增加同时读写功能。 文件的关闭：&lt;变量名&gt;.close() 关于文件内容读取的函数：.read(size=-1)：读入全部内容，如果给出参数，读入前size长度.readline(size=-1)：读入一行内容，如果给出参数，读入该行前size长度.readlines(hint=-1)：读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行 数据文件的写入操作：.write(s)：向文件写入一个字符串或字节流.writelines(lines)：将一个元素全为字符串的列表写入文件","categories":[{"name":"python","slug":"python","permalink":"http://uscair.club/categories/python/"}],"tags":[{"name":"文件","slug":"文件","permalink":"http://uscair.club/tags/%E6%96%87%E4%BB%B6/"}],"author":{"name":"Page"}},{"title":"Tensorflow 预测燃油效率","slug":"基本回归：预测燃油效率","date":"2020-02-27T16:00:00.000Z","updated":"2020-02-27T16:00:00.000Z","comments":true,"path":"2020/02/28/基本回归：预测燃油效率/","link":"","permalink":"http://uscair.club/2020/02/28/%E5%9F%BA%E6%9C%AC%E5%9B%9E%E5%BD%92%EF%BC%9A%E9%A2%84%E6%B5%8B%E7%87%83%E6%B2%B9%E6%95%88%E7%8E%87/","excerpt":"","text":"Tensorflow 预测燃油效率环境： jupyter notebook tensorflow2.1.0 python3.7.5 1234567import pathlibimport pandas as pdimport seaborn as snsimport tensorflow as tfimport matplotlib.pyplot as pltfrom tensorflow import keras as kerasfrom tensorflow.keras import layers as layers 12dataset_path = keras.utils.get_file(\"auto-mpg.data\", \"http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data\")print(dataset_path) 1/Users/xxxx/.keras/datasets/auto-mpg.data 123456789column_names = ['MPG','Cylinders','Displacement','Horsepower','Weight', 'Acceleration', 'Model Year', 'Origin']#'每加伦汽油能距的英里数'，'汽缸'，'排量'，'马力'，'重量'，“加速”，“型号年份”，“来源”raw_dataset=pd.read_csv(dataset_path, names=column_names, # 表头 na_values='?', # 把未知名改为？ comment='\\t', sep=' ', # 要使用的定界符 skipinitialspace=True) # 在定界符后跳过空格。 1dataset = raw_dataset.copy() 1dataset.tail() # 返回最后n行，n默认5 MPG Cylinders Displacement Horsepower Weight Acceleration Model Year Origin 393 27.0 4 140.0 86.0 2790.0 15.6 82 1 394 44.0 4 97.0 52.0 2130.0 24.6 82 2 395 32.0 4 135.0 84.0 2295.0 11.6 82 1 396 28.0 4 120.0 79.0 2625.0 18.6 82 1 397 31.0 4 119.0 82.0 2720.0 19.4 82 1 1dataset.isna().sum() # 计算缺失值的个数 123456789MPG 0Cylinders 0Displacement 0Horsepower 6Weight 0Acceleration 0Model Year 0Origin 0dtype: int64 1dataset = dataset.dropna() # 删除缺失值 1origin=dataset.pop('Origin') # 弹出Origin标签，并用origin来获取dataset中的Origin的值 123dataset['USA']=(origin==1)*1.0 # 如果origin为1，则USA的标签下为1.0dataset['Europe']=(origin==2)*1.0 # 如果origin为2，则Europe的标签下为1.0dataset['Japan']=(origin==3)*1.0 # 如果origin为3，则Japan的标签下为1.0 1dataset.tail() MPG Cylinders Displacement Horsepower Weight Acceleration Model Year USA Europe Japan 393 27.0 4 140.0 86.0 2790.0 15.6 82 1.0 0.0 0.0 394 44.0 4 97.0 52.0 2130.0 24.6 82 0.0 1.0 0.0 395 32.0 4 135.0 84.0 2295.0 11.6 82 1.0 0.0 0.0 396 28.0 4 120.0 79.0 2625.0 18.6 82 1.0 0.0 0.0 397 31.0 4 119.0 82.0 2720.0 19.4 82 1.0 0.0 0.0 12train_dataset = dataset.sample(frac=0.8,random_state=0) #以随机数种子0在数据集中抽取80%test_dataset = dataset.drop(train_dataset.index) # 在数据集中删除训练集作为测试集 1sns.pairplot(train_dataset[[\"MPG\", \"Cylinders\", \"Displacement\", \"Weight\"]],diag_kind='kde') 1&lt;seaborn.axisgrid.PairGrid at 0x10cd98110&gt; 12train_stats = train_dataset.describe()train_stats.pop(\"MPG\") # jupyter 交换环境弹出并输出输出MPG 123456789count 314.000000mean 23.310510std 7.728652min 10.00000025% 17.00000050% 22.00000075% 28.950000max 46.600000Name: MPG, dtype: float64 1train_stats = train_stats.transpose() 1train_stats count mean std min 25% 50% 75% max Cylinders 314.0 5.477707 1.699788 3.0 4.00 4.0 8.00 8.0 Displacement 314.0 195.318471 104.331589 68.0 105.50 151.0 265.75 455.0 Horsepower 314.0 104.869427 38.096214 46.0 76.25 94.5 128.00 225.0 Weight 314.0 2990.251592 843.898596 1649.0 2256.50 2822.5 3608.00 5140.0 Acceleration 314.0 15.559236 2.789230 8.0 13.80 15.5 17.20 24.8 Model Year 314.0 75.898089 3.675642 70.0 73.00 76.0 79.00 82.0 USA 314.0 0.624204 0.485101 0.0 0.00 1.0 1.00 1.0 Europe 314.0 0.178344 0.383413 0.0 0.00 0.0 0.00 1.0 Japan 314.0 0.197452 0.398712 0.0 0.00 0.0 0.00 1.0 123train_labels = train_dataset.pop('MPG')test_labels = test_dataset.pop('MPG')# 这个标签是使用训练模型进行预测的值。 12def norm(x): return (x - train_stats['mean']) / train_stats['std'] # 化成0-1正态分布 12normed_train_data = norm(train_dataset) # 归一化normed_test_data = norm(test_dataset) # 归一化 1234model = keras.models.Sequential()model.add(layers.Dense(64,activation='relu',input_shape=[len(train_dataset.keys())]))model.add(layers.Dense(64,activation='relu'))model.add(layers.Dense(1)) 123model.compile(loss='mse', optimizer=tf.keras.optimizers.RMSprop(0.001), metrics=['mae', 'mse']) 1model.summary() 1234567891011121314Model: \"sequential\"_________________________________________________________________Layer (type) Output Shape Param # =================================================================dense (Dense) (None, 64) 640 _________________________________________________________________dense_1 (Dense) (None, 64) 4160 _________________________________________________________________dense_2 (Dense) (None, 1) 65 =================================================================Total params: 4,865Trainable params: 4,865Non-trainable params: 0_________________________________________________________________ 12example_batch = normed_train_data[:10]example_result = model.predict(example_batch) 1print(example_result) [[ 0.06187941] [ 0.16284567] [ 0.19416149] [ 0.3226478 ] [ 0.09883147] [ 0.00343724] [ 0.13330291] [ 0.62984717] [-0.05348695] [ 0.44078857]]123456# 通过为每个完成的时期打印一个点来显示训练进度class PrintDot(keras.callbacks.Callback): def on_epoch_end(self, epoch, logs=None): if (epoch%100==0): print(' ') # 每一百行换行 print('.',end=' ') 123456history=model.fit(normed_train_data, train_labels, epochs=1000, validation_split=0.2, # 把训练集的20%作为验证集 verbose=0, # 不显示进度条 callbacks=[PrintDot()]) # 回调函数为PrintDothist=pd.DataFrame(history.history)hist['epoch']=history.epoch # 增加epoch的标签 1hist.tail() loss mae mse val_loss val_mae val_mse epoch 995 2.448885 0.975710 2.448885 9.030066 2.268713 9.030066 995 996 2.376843 0.999163 2.376843 9.096817 2.273271 9.096817 996 997 2.383884 0.992754 2.383883 9.657296 2.356696 9.657296 997 998 2.504148 1.021134 2.504148 9.152325 2.318949 9.152325 998 999 2.421463 0.947287 2.421463 9.146635 2.284075 9.146635 999 123456789101112131415161718192021222324def plot_history(history): hist = pd.DataFrame(history.history) hist['epoch'] = history.epoch plt.figure() plt.xlabel('Epoch') plt.ylabel('Mean Abs Error [MPG]') plt.plot(hist['epoch'], hist['mae'], # (x,y) label='Train Error') # 线段的名称即标签卡上的名称 plt.plot(hist['epoch'], hist['val_mae'], label = 'Val Error') plt.ylim([0,5]) plt.legend() plt.figure() plt.xlabel('Epoch') plt.ylabel('Mean Square Error [$MPG^2$]') plt.plot(hist['epoch'], hist['mse'], label='Train Error') plt.plot(hist['epoch'], hist['val_mse'], label = 'Val Error') plt.ylim([0,20]) plt.legend() # 打印标签卡 plt.show() 1plot_history(history) # 该图表显示在约100个epoch之后，误差非但没有改进，反而出现恶化。 1train_dataset.keys() 123Index(['Cylinders', 'Displacement', 'Horsepower', 'Weight', 'Acceleration', 'Model Year', 'USA', 'Europe', 'Japan'], dtype='object') 1234model = keras.models.Sequential()model.add(layers.Dense(64,activation='relu',input_shape=[len(train_dataset.keys())]))model.add(layers.Dense(64,activation='relu'))model.add(layers.Dense(1)) 123model.compile(loss='mse', optimizer=tf.keras.optimizers.RMSprop(0.001), metrics=['mae', 'mse']) 12345678history=model.fit(normed_train_data, train_labels, epochs=1000, validation_split=0.2, verbose=0, callbacks=[keras.callbacks.EarlyStopping(monitor='val_loss', patience=10), # 当绝对变化值小于min_data，则退出，min_data默认为0 PrintDot()]) 1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1plot_history(history) 1test_predictions = model.predict(normed_test_data).flatten() # 展平 12345678plt.scatter(test_labels,test_predictions)plt.xlabel('True values [MPG]')plt.ylabel(\"Predictions [MPG]\")plt.axis('equal') # 等比例plt.axis('square')plt.xlim([0,plt.xlim()[1]])plt.ylim([0,plt.ylim()[1]])_ = plt.plot([-100,100],[-100,100]) # 画一条经过（-100，-100）与（100，100）的线段 1234error = test_predictions-test_labelsplt.hist(error, bins=25) # 有bins条数plt.xlabel('Prediction Error [MPG]')_ = plt.ylabel(\"Count\")","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://uscair.club/tags/TensorFlow/"}],"author":{"name":"Gowi"}},{"title":"OpenCV图像处理初体验","slug":"OpenCV图像处理初体验（python语言）","date":"2020-02-23T11:00:00.000Z","updated":"2020-02-23T11:00:00.000Z","comments":true,"path":"2020/02/23/OpenCV图像处理初体验（python语言）/","link":"","permalink":"http://uscair.club/2020/02/23/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88python%E8%AF%AD%E8%A8%80%EF%BC%89/","excerpt":"","text":"一、将图像分为RGB三个通道的图像，转换为灰度图，并画出直方图 1.首先要学会如何读取并展示出一张图片： 123456789# -*- coding: cp936 -*- # 防止中文出错import cv2 #引入OpenCV库img&#x3D;cv2.imread(&#39;D:&#x2F;Camera Roll&#x2F;aling.jpg&#39;,1)# 括号左边填入你所选照片的地址（如果照片和py文件在一个文档里面可以直接输入照片名字），括号右边默认为1彩色图片，当填入0时读取的是灰色图片cv2.namedWindow(&#39;img&#39;) #取一个窗口的名字cv2.imshow(&#39;img&#39;,img) #展示图片cv2.waitKey(0) #使图片停留在屏幕上，不至于很快闪退cv2.destroyAllWindows() #关闭所有窗口 运行结果为： 2.进行RGB三通道输出、灰度图以及直方图 12345678910111213141516171819202122232425262728293031323334353637383940import cv2import numpy as np #用np代替引入的numpyfrom matplotlib import pyplot as pltimg&#x3D;cv2.imread(&#39;D:&#x2F;Camera Roll&#x2F;aling.jpg&#39;）b,g,r&#x3D;cv2.split(img) #进行通道分离pic&#x3D;np.zeros(np.shape(img),np.uint8) #生成零矩阵pic[:,:,0]&#x3D;bcv2.namedWindow(&#39;blue&#39;)cv2.imshow(&#39;blue&#39;,pic)cv2.waitKey(0)pic&#x3D;np.zeros(np.shape(img),np.uint8)pic[:,:,1]&#x3D;gcv2.namedWindow(&#39;green&#39;)cv2.imshow(&#39;green&#39;,pic)cv2.waitKey(0)pic&#x3D;np.zeros(np.shape(img),np.uint8)pic[:,:,2]&#x3D;rcv2.namedWindows(&#39;red&#39;)cv2.imshow(&#39;red&#39;,pic)cv2.waitKey(0)color&#x3D;(&quot;blue&quot;,&quot;green&quot;,&quot;red&quot;)for i,color in enumerate(color): #用于遍历序列中的下标和元素 hist&#x3D;cv2.calcHist([img],[i],None,[256],[0,256]) #建立直方图([图像],[通道],掩膜：一般不需要，设为None,[256],[0,256]) plt.plot(hist,color&#x3D;color) plt.xlim([0,256]) plt.show(）img&#x3D;cv2.imread(&#39;D:&#x2F;Camera Roll&#x2F;aling.jpg&#39;,0) #读取图片为灰度图cv2.namedWindow(&#39;gray&#39;)cv2.imshow(&#39;gray&#39;,img)cv2.waitKey(0)plt.hist(img.ravel(),256,[0,256])plt.show()cv2.destoryAllWindows() 运行结果： 二、运用数学函数对灰色图进行灰度转换 用一个y=-x+255,把黑的变成白的，把白的变成黑的 123456789101112131415161718import cv2import numpy as npimg&#x3D;cv2.imread(&#39;D:&#x2F;Camera Roll&#x2F;wei.jpg&#39;,0)# 获取图片的高度和宽度height&#x3D;img.shape[0]width&#x3D;img.shape[1]# 建立一个零矩阵result&#x3D;np.zeros((height,width),np.uint8)for i in range(height): for j in range(width): gray&#x3D;255-img[i,j] # 运用一个 y&#x3D;-x+255 的数学函数 result[i,j]&#x3D;np.uint8(gray) cv2.imshow(&#39;gray&#39;,img) cv2.imshow(&#39;result&#39;,result) cv2.waitKey(0) cv2.destoryAllWindows() 运行结果：三、createTrackbar函数的简单使用 1234567891011121314151617import cv2def callback(x): #回调函数 pass cv2.namedWindow(&#39;image&#39;) img&#x3D;cv2.imread(&#39;D:&#x2F;Camera Roll&#x2F;wifi.jpg&#39;) # 建立一个滑块 cv2.createTrackbar(&#39;num&#39;,&#39;image&#39;,0,255,callback)while(1): num&#x3D;cv2.getTrackbarPos(&quot;num&quot;,&quot;image&quot;) #获取当前滑块的位置 ret,img1&#x3D;cv2.threshold(img,num,255,cv2.THRESH_BINARY) cv2.imshow(&#39;image&#39;,img2) k&#x3D;cv2.waitKey(1） &amp; 0xFF if k&#x3D;&#x3D;27: breakcv2.destoryAllWindows()# 该程序按Esc结束 运行结果：不同的num值，图像颜色对比不一样。 本人是第一次接触图像处理，很多东西还不是很懂，以后会多多学习的，如有错误请看到的小伙伴多多提醒。有冒犯之处，请多原谅。","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://uscair.club/tags/OpenCV/"},{"name":"图片变化","slug":"图片变化","permalink":"http://uscair.club/tags/%E5%9B%BE%E7%89%87%E5%8F%98%E5%8C%96/"}],"author":{"name":"风车车"}},{"title":"NAO机器人的魔鬼步伐","slug":"“NAO机器人”的魔鬼步伐","date":"2020-02-23T10:44:03.033Z","updated":"2020-02-23T10:44:03.033Z","comments":true,"path":"2020/02/23/“NAO机器人”的魔鬼步伐/","link":"","permalink":"http://uscair.club/2020/02/23/%E2%80%9CNAO%E6%9C%BA%E5%99%A8%E4%BA%BA%E2%80%9D%E7%9A%84%E9%AD%94%E9%AC%BC%E6%AD%A5%E4%BC%90/","excerpt":"","text":"初步通过python语言实现“NAO“机器人speak和move 编译环境 点我哦！你也可以使NAO迈出魔鬼的步伐傻乎乎的小小机器人** 参考代码1（实现电脑与机器人的连接） **参考代码2（使机器人稳步行走的配置，可根据不同环境不同类型做相应调整） ** 参考代码3（行走及说话的实现） **","categories":[{"name":"NAO","slug":"NAO","permalink":"http://uscair.club/categories/NAO/"}],"tags":[{"name":"NAOqi","slug":"NAOqi","permalink":"http://uscair.club/tags/NAOqi/"}],"author":{"name":"XuWenjun"}},{"title":"机器学习系列（四）——规则化（Regularize）","slug":"机器学习系列（四）——规则化（Regularize）","date":"2020-02-23T03:13:00.044Z","updated":"2020-02-23T03:13:00.044Z","comments":true,"path":"2020/02/23/机器学习系列（四）——规则化（Regularize）/","link":"","permalink":"http://uscair.club/2020/02/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%A7%84%E5%88%99%E5%8C%96%EF%BC%88Regularize%EF%BC%89/","excerpt":"","text":"机器学习系列（四）——规则化（Regularize）机器学习中，我们一直期望学习到一个泛化能力（generalization）强的函数，只有泛化能力强的模型才能很好地适用于整个样本空间，才能在新的样本点上表现良好。但是训练集通常只是整个样本空间很小的一部分，在训练机器学习模型时，稍有不注意，就可能将训练集中样本的特性当作了全体样本的共性，以偏概全，而造成过拟合（overfitting）问题，如何避免过拟合，是训练机器学习模型时最亟待解决的绊脚石。从问题的根源出发，解决过拟合无非两种途径： ​ 1.使训练集能够尽可能全面的描述整个样本空间。因此又存在两个解决方向。①减少特征维数，特征维数减少了，样本空间的大小也随之减少了，现有数据集对样本空间的描述也就提高了。②增加训练样本数量，试图直接提升对样本空间的描述能力。​ 2.加入规则化项。第一种方法的人力成本通常很大，所以在实际中，我们通常采用第二种方法提升模型的泛化能力。注：规则化在有些文档中也称作正则化，在本文中都采用规则化描述。 规则化（Regularize）首先回顾一下，在寻找模型最优参数时，我们通常对损失函数采用梯度下降（gradient descent）算法 通过上述公式，我们将一步步走到损失函数的最低点（不考虑局部最小值和鞍点情况），这时的w和b就是我们要找的最优参数。对于回归问题，我们还可以直接采用最小二乘法求得解析解。 可以看到，当前我们的损失函数只考虑最小化训练误差，希望找到的最优函数能够尽可能的拟合训练数据。但是正如我们所了解的，训练集不能代表整个样本空间，所以训练误差也不能代表在测试误差，训练误差只是经验风险，我们不能过分依赖这个值。当我们的函数对训练集拟合特别好，训练误差特别小时，我们也就走进了一个极端——过拟合。为了解决这个问题，研究人员提出了规则化（regularize）方法。通过给模型参数附加一些规则，也就是约束，防止模型过分拟合训练数据。规则化通过在原有损失函数的基础上加入规则化项实现。此时，最优化的目标函数如下： 其中，第一项对应于模型在训练集上的误差，第二项对应于规则化项。为了使得该目标函数最小，我们既需要训练误差最小，也需要规则化项最小，因此需要在二者之间做到权衡。那应该选择怎样的表达式作为规则化项呢？以下引用李航博士《统计学习方法》中的一些描述： 规则化是结构风险最小化策略的实现，是在经验风险最小化上加一个规则化项（regularizer）或罚项（penalty term）。规则化项一般是模型复杂度的单调递增函数，模型越复杂，规则化值就越大。比如，规则化项可以是模型参数向量的范数。 规则化符合奥卡姆剃刀（Occam’s razor）原理。奥卡姆剃刀原理应用于模型选择时变为以下想法：在所有可能选择的模型中，能够很好地解释已知数据并且十分简单才是最好的模型，也就是应该选择的模型。从贝叶斯估计的角度来看，规则化项对应于模型的先验概率。可以假设复杂的模型有较大的先验概率，简单的模型有较小的先验概率。 所以通常我们采用L1-范数和L2-范数作为规则化项。 L1-范数向量的L1-范数是向量的元素绝对值之和，即 当采用L1-范数作为规则化项对参数进行约束时，我们的优化问题可以写成以下形式： 采用拉格朗日乘子法可以将约束条件合并到最优化函数中，即 其中λ是于C一一对应的常数，用来权衡误差项和规则化项，λλ越大，约束越强。二维情况下分别将损失函数的等高线图和L1-范数规则化约束画在同一个坐标轴下， L1-范数约束对应于平面上一个正方形norm ball。等高线与norm ball首次相交的地方就是最优解。可以看到，L1-ball在和每个坐标轴相交的地方都有“角”出现，大部分时候等高线都会与norm ball在角的地方相交。这样部分参数值被置为0，相当于该参数对应的特征将不再发挥作用，实现了特征选择，增加了模型的可解释性。关于L1-范数规则化，可以解释如下：训练出来的参数代表权重，反应了特征的重要程度，比如y=20x1+5x2+3y=20x1+5x2+3中，特征x1x1明显比x2x2更加重要，因为x1的变动相较于x2的变动，会给y带来更大的变化。在人工选取的特征中，往往会存在一些冗余特征或者无用特征，L1-范数规则化将这些特征的权重置为0，实现了特征选择，同时也简化了模型。L1-范数在x=0处存在拐点，所以不能直接求得解析解，需要用次梯度方法处理不可导的凸函数。 L2-范数除了L1-范数，还有一种广泛使用的规则化范数：L2-范数。向量的L2-范数是向量的模长，即 当采用L2-范数作为规则化项对参数进行约束时，我们的优化问题可以写成以下形式： 同样可以将约束条件合并到最优化函数中，得到如下函数 也将损失函数的等高线图和L2-范数规则化约束画在同一个坐标轴下， L2-范数约束对应于平面上一个圆形norm ball。等高线与norm ball首次相交的地方就是最优解。与L1-范数不同，L2-范数使得每一个w都很小，都接近于0，但不会等于0，L2-范数规则化仍然试图使用每一维特征。对于L2-范数规则化可以解释如下：L2-范数规则化项将参数限制在一个较小的范围，参数越小，曲面越光滑，因而不会出现在很小区间内，弯曲度很大的情况，当xx一个较大的变化时，yy也只会变化一点点，模型因此更加稳定，也就是更加generalization。加入L2-范数规则化项后，目标函数扩展为如下形式： 同样，如果采用最小二乘法，正规方程的形式需要相应修改，并且对于样本数目少于特征维数的情况时，矩阵(XT X)将不满秩，(XT X)也就不可逆，确切地说，此时方程组是不定方程组，将会有无穷多解，已有的数据不足以确定一个解，数学上常加入约束项以使得唯一解成为可能，加入L2-范数规则化项正好对应了这种方法，此时解析解如下：","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Wonder"}},{"title":"人工智能--初级架构(1)","slug":"人工智能简介","date":"2020-02-22T16:00:00.000Z","updated":"2020-02-22T16:00:00.000Z","comments":true,"path":"2020/02/23/人工智能简介/","link":"","permalink":"http://uscair.club/2020/02/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%80%E4%BB%8B/","excerpt":"","text":"人工智能简介人工智能（Artificial Intelligence，缩写为AI）亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。该词也指出研究这样的智能系统是否能够实现，以及如何实现。人工智能于一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”，智能主体指一个可以观察周遭环境并作出行动以达致目标的系统。约翰·麦卡锡于1955年的定义是“制造智能机器的科学与工程”。安德里亚斯·卡普兰（Andreas Kaplan）和迈克尔·海恩莱因（Michael Haenlein）将人工智能定义为“系统正确解释外部数据，从这些数据中学习，并利用这些知识通过灵活适应实现特定目标和任务的能力”。人工智能的研究是高度技术性和专业的，各分支领域都是深入且各不相通的，因而涉及范围极广。 AI的核心问题包括建构能够跟人类似甚至超卓的推理、知识、规划、学习、交流、感知、移物、使用工具和操控机械的能力等。当前有大量的工具应用了人工智能，其中包括搜索和数学优化、逻辑推演。而基于仿生学、认知心理学，以及基于概率论和经济学的算法等等也在逐步探索当中。 思维来源于大脑，而思维控制行为，行为需要意志去实现，而思维又是对所有数据采集的整理，相当于数据库，所以人工智能最后会演变为机器替换人类。 人工智能的定义可以分为两部分，即“人工”和“智能”。“人工”比较好理解，争议性也不大。有时我们会要考虑什么是人力所能及制造的，或者人自身的智能程度有没有高到可以创造人工智能的地步，等等。但总的来说，“人工系统”就是通常意义下的人工系统。 人工智能是研究使计算机来模拟人的某些思维过程和智能行为（如学习、推理、思考、规划等）的学科，主要包括计算机实现智能的原理、制造类似于人脑智能的计算机，使计算机能实现更高层次的应用。人工智能将涉及到计算机科学、心理学、哲学和语言学等学科。可以说几乎是自然科学和社会科学的所有学科，其范围已远远超出了计算机科学的范畴，人工智能与思维科学的关系是实践和理论的关系，人工智能是处于思维科学的技术应用层次，是它的一个应用分支。从思维观点看，人工智能不仅限于逻辑思维，要考虑形象思维、灵感思维才能促进人工智能的突破性的发展，数学常被认为是多种学科的基础科学，数学也进入语言、思维领域，人工智能学科也必须借用数学工具，数学不仅在标准逻辑、模糊数学等范围发挥作用，数学进入人工智能学科，它们将互相促进而更快地发展。 强人工智能(BOTTOM-UP AI) 强人工智能观点认为有可能制造出真正能推理（REASONING）和解决问题（PROBLEM_SOLVING）的智能机器，并且，这样的机器能将被认为是有知觉的，有自我意识的。强人工智能可以有两类： 类人的人工智能，即机器的思考和推理就像人的思维一样。 非类人的人工智能，即机器产生了和人完全不一样的知觉和意识，使用和人完全不一样的推理方式。 弱人工智能(TOP-DOWN AI) 弱人工智能观点认为不可能制造出能真正地推理（REASONING）和解决问题（PROBLEM_SOLVING）的智能机器，这些机器只不过看起来像是智能的，但是并不真正拥有智能，也不会有自主意识。 主流科研集中在弱人工智能上，并且一般认为这一研究领域已经取得可观的成就。强人工智能的研究则处于停滞不前的状态下。 人工智能的实际应用： 机器视觉，指纹识别，人脸识别，视网膜识别，虹膜识别，掌纹识别，专家系统，自动规划，智能搜索，定理证明，博弈，自动程序设计，智能控制，机器人学，语言和图像理解，遗传编程。 人工智能架构一.机器人三大定律： (1)机器人不得伤害人类个体，或者目睹人类个体遭受危险而袖手不管。 (2)机器人必须服从人给予他的命令，当该命令与第一定律冲突时例外。 (3)机器人在不违法第一，第二定律情况下腰尽可能保护自己生存。 机器人第零定律：机器人必须保护人类的整体利益不受伤害，其他定律都是在这一前提才能成立。 二.机器人： 机器人是自动控制机器 ， 自动控制机器包括一切模拟人类行为或思想与模拟其他生物的机械（如机器狗，机器猫等）。狭义上对机器人的定义还有很多分类法及争议，有些电脑程序甚至也被称为机器人。在当代工业中，机器人指能自动执行任务的人造机器装置，用以取代或协助人类工作。 机器人一般由执行机构，驱动装置，检测装置和控制系统和复杂机械组成。 机器人本体执行机构，臀部采用空间开链连杆机构，运动副称为关节，关节个数称为机器人的自由度数，根据关节配置型式和运动坐标不同，机器人执行机构可分为直角坐标式，圆柱做标式，极坐标式，关节坐标式。 机器人的控制系统：一种是集中式控制，机器人全部控制由一台微型计算机完成，另一种是分散式控制。多台微型来分担控制。如当采用上、下两级微机共同完成机器人的控制时，主机常用于负责系统的管理、通讯、运动学和动力学计算，并向下级微机发送指令信息；作为下级从机，各关节分别对应一个CPU，进行插补运算和伺服控制处理，实现给定的运动，并向主机反馈信息。根据作业任务要求的不同，机器人的控制方式又可分为点位控制、连续轨迹控制和力（力矩）控制。 三.图灵测试： 电脑能在5分钟内回答由人类测试者提出的一系列问题，且其超过30%的回答让测试者误认为是人类所答 。 即一个人在不接触对方的情况下，通过一种特殊的方式，和对方进行一系列的问答，如果在相当长时间内，他无法根据这些问题判断对方是人还是计算机，那么，就可以认为这个计算机具有同人相当的智力，即这台计算机是能思维的 。","categories":[{"name":"人工智能","slug":"人工智能","permalink":"http://uscair.club/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}],"tags":[{"name":"小白学习","slug":"小白学习","permalink":"http://uscair.club/tags/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0/"}],"author":{"name":"HL"}},{"title":"卷积神经网络（3）","slug":"卷积神经网络（3）","date":"2020-02-22T16:00:00.000Z","updated":"2020-02-22T16:00:00.000Z","comments":true,"path":"2020/02/23/卷积神经网络（3）/","link":"","permalink":"http://uscair.club/2020/02/23/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%883%EF%BC%89/","excerpt":"","text":"padding当进行卷积操作时，例如一个3x3的过滤器卷积一个6x6的图像，不断地卷积过后，图像就会变得越来越小。并且边缘的像素卷积比中间的采用少，会造成边缘的信息丢失或者更准确来说角落或图像边缘的信息发挥的作用较小。因此需要运用padding进行填充。 如上图：这个像素点（绿色阴影标记）只被一个过滤器输出所触碰或者使用，因为它位于这个3×3的区域的一角。但如果是在中间的像素点，比如这个（红色方框标记），就会有许多3×3的区域与之重叠。所以那些在角落或者边缘区域的像素点在输出中采用较少，意味着你丢掉了图像边缘位置的许多信息。 因此，如果我们在卷积操作之前填充这幅图像。在图像边缘再填充一层像素，这个6x6的矩阵就会变为8x8，再进行3x3的卷积，得出后的图像就依然是6x6。 同时，padding还有两种形式，分别是SAME和Valid. SAME用SAME填充过后，输入大小如6x6则输出结果仍为6x6。| 1 |2 | 3 |0||–|–|–|–|| 5 | 6 |7|0|如上表，如步长为2，向右滑动两格。会发现剩下的不满足2x2，SAME方法便会填充增加第4列，通常为0。 ValidValid卷积意味着不填充，这样的话，如果你有一个nn的图像，用一个ff的过滤器卷积，它将会给你一个(n-f+1)*(n-f+1)维的输出。这类似于我们在前面的视频中展示的例子，有一个6×6的图像，通过一个3×3的过滤器，得到一个4×4的输出。 LeNet-5LeNet-5是一种用于手写体字符识别的非常高效的卷积神经网络。出自论文Gradient-Based Learning Applied to Document Recognition。LeNet-5共有7层，不包含输入，每层都包含可训练参数；每个层有多个Feature Map，每个FeatureMap通过一种卷积滤波器提取输入的一种特征。 input层，输入一个32x32的图像。在卷积时没有使用padding（文章中有提到32x32的输入实际上比常用的28x28的输入要大，可以认为是在输入的时候就已经padding过了）。 C1,C3,C5三层均为卷积层，卷积核均为5x5. S2,S4均为池化层，采样区域均为2x2. F6为全连接层，计算方式：计算输入向量和权重向量之间的点积，再加上一个偏置，结果通过sigmoid函数输出。 Output层也为全连接层，共有10个节点，分别代表数字0到9，且如果节点i的值为0，则网络识别的结果是数字i。采用的是径向基函数（RBF）的网络连接方式。假设x是上一层的输入，y是RBF的输出，则RBF输出的计算方式是：上式的值由i的比特图编码确定，i从0到9，j取值从0到7*12-1。RBF输出的值越接近于0，则越接近于i，即越接近于i的ASCII编码图，表示当前网络输入的识别结果是字符i。该层有84x10=840个参数和连接。 0 1 2 3 4 5 6 0 7 8 9","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"CNN","slug":"CNN","permalink":"http://uscair.club/tags/CNN/"}],"author":"name:ffffff"},{"title":"STM32单片机系列（三）","slug":"STM32 IO中断（F407）","date":"2020-02-21T16:00:00.000Z","updated":"2020-02-21T16:00:00.000Z","comments":true,"path":"2020/02/22/STM32 IO中断（F407）/","link":"","permalink":"http://uscair.club/2020/02/22/STM32%20IO%E4%B8%AD%E6%96%AD%EF%BC%88F407%EF%BC%89/","excerpt":"","text":"STM32 IO口中断中断STM32 F4 的每个 IO 都可以作为外部中断的中断输入口，这点也是 STM32 F4 的强大之处。 STM32 F407 的中断控制器支持 22 个外部中断事件请求。每个中断设有状态位，每个中断事件都有独立的触发和屏蔽设置。 STM32 F407的 22 个外部中断为：EXTI线 0~15 ：对应外部 IO 口的输入中断。EXTI线 16 ：连接到 PVD 输出。EXTI线 17 ：连接到 RTC 闹钟事件。EXTI线 18 ：连接到 USB OTG FS 唤醒事件。EXTI线 19 ：连接到以太网唤醒事件。EXTI线 20 ：连接到 USB OTG HS( 在 FS 中配置 唤醒事件。EXTI线 21 ：连接到 RTC 入侵和时间戳事件。EXTI线 22 ：连接到 RTC 唤醒事件。下面来重点介绍IO口的一些中断：如图所示：其中每一个中断线可以映射多个IO口，但是同组IO口里面一次只能有一个IO口占用中断线。如（PA0-PG0）是一组可以映射到中断线EXTI0但是一次只能有其中的一个IO口映射上去。 每一个中断线可以设置它的触发方式（上升沿触发，下降沿触发，边沿触发，上升沿和下降沿都可以触发）和使能位状态位。 IO在外部中断向量里面只分配了7个中断服务函数0，1，2，3，4，5-9，10-15中断的基本配置方法： 1. 首先使能对应的时钟线： RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE); IO中断是挂载在APB2时钟线上的，通过设置ENABLE使能IO口时钟 2. 初始化中断： 第一个成员EXTI_Line 配置中断线，第二个成员EXTI_Mode 分为了事件触发和中断触发俩种： EXTI_Mode_Event EXTI_Mode_Interrupt第三个成员EXTI_Trigger 设置中断触发方式： EXTI_Trigger_Rising 上升沿触发 EXTI_Trigger_Falling 下降沿触发 EXTI_Trigger_Rising_Falling 上升下降沿同时触发第四个成员EXTI_LineCmd 使能对应的中断线： ENABLE 使能 DISABLE 失能 3. 接下来配置中断向量： 第一个成员NVIC_IRQChannel 配置对应的中断通道：可在IRQn_Type中查询对应的中断方式，由于数目太多在这里不一一列举第二个成员NVIC_IRQChannelPreemptionPriority 配置该中断的抢占优先级：抢占优先级分为四种用俩位二进制数表示 00 01 10 11 其中00最大第三个成员NVIC_IRQChannelSubPriority 配置该中断的响应优先级：同抢占优先级一样分为4种数字越大优先级数越低第四个成员NVIC_IRQChannelCmd 使能对应中断向量组： ENABLE 使能 DISABLE 失能 配置完以上就可以自由配置函数EXIT_IRQHandler（）对应的中断服务函数（发生中断就跳转至函数里面）来达到自己想要的目的。 最后介绍几个关于中断的函数：EXIT_GetITStatus()判断中断线上的中断是否发生。EXIT_ClearITPendingBit（）清楚对应线上的中断标志位。RCC_APB2PeriphClockCmd（）使能对应中断的时钟。","categories":[{"name":"单片机","slug":"单片机","permalink":"http://uscair.club/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"STM32F407","slug":"STM32F407","permalink":"http://uscair.club/tags/STM32F407/"}],"author":{"name":"Page"}},{"title":"利用深度神经网络进行基本图像分类","slug":"利用深度神经网络进行基本图像分类","date":"2020-02-21T16:00:00.000Z","updated":"2020-02-21T16:00:00.000Z","comments":true,"path":"2020/02/22/利用深度神经网络进行基本图像分类/","link":"","permalink":"http://uscair.club/2020/02/22/%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%9B%E8%A1%8C%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/","excerpt":"","text":"利用深度神经网络进行基本图像分类此代码在colab已经经过测试并且可以查看TensorBoard：地址 环境：Tensorflow-2.1.0、Python3.6、google colab In[1]: 123import sslssl._create_default_https_context = ssl._create_unverified_context# 不知道为什么在本地的jupyter notebook上无法导入fashion_mnist数据集(本地需要，google colab不需要) In[2]: 1234567891011121314151617import matplotlib as mplimport matplotlib.pyplot as plt%matplotlib inlineimport numpy as npimport sklearn import pandas as pdimport osimport sysimport timeimport tensorflow as tffrom tensorflow import keras as kerasfrom sklearn.preprocessing import StandardScalerfor module in mpl,np,pd,sklearn,tf,keras: print(module.__name__,module.__version__)# 打印版本库 Out[1]: matplotlib 3.1.2 numpy 1.18.1 pandas 0.25.3 sklearn 0.22.1 tensorflow 2.1.0 tensorflow_core.keras 2.2.4-tfIn[3]: 123fashion_mnist=keras.datasets.fashion_mnist(x_train_all, y_train_all),(x_test, y_test)=fashion_mnist.load_data()# 导入fashion_mnist数据集 In[4] 1234567x_valid,x_train=x_train_all[:5000],x_train_all[5000:]y_valid,y_train=y_train_all[:5000],y_train_all[5000:]# fashion_mnist有6w个数据，前5k个为验证集，其中x为图片，y为序列号print(x_valid.shape,y_valid.shape)print(x_train.shape,y_valid.shape)print(x_test.shape,y_test.shape)# 打印数据集的格式 Out[2] (5000, 28, 28) (5000,) (55000, 28, 28) (5000,) (10000, 28, 28) (10000,)In[5]: 12print(np.max(x_train),np.min(x_train))# 打印数据集中的最大值和最小值 Out[3]: 255 0In[6]: 123456789# x= (x-u)/stdscaler=StandardScaler()# x_train:[None, 28, 28] -&gt; [None, 784]x_train_scaled=scaler.fit_transform(x_train.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) #会自动记录方差u和均值std，并进行归一化x_valid_scaled=scaler.transform(x_valid.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) # 会根据自动记录的方差u和均值std进行归一化x_test_scaled=scaler.transform(x_test.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) # 会根据自动记录的方差u和均值std进行归一化 Out[4]: 2.0231433 -0.8105136In[7]: 123456def show_single_image(img_arr): plt.imshow(img_arr,cmap='binary') plt.show()# 打印单张图片 show_single_image(x_train[0]) Out[5]: In[8]: 1234567891011121314151617181920def show_images(n_rows,n_cols,x_data,y_data,class_names): assert len(x_data)==len(y_data) assert n_cols*n_rows&lt;len(x_data) plt.figure(figsize=(n_cols*1.4,n_rows*1.6)) for row in range(n_rows): for col in range(n_cols): index=n_cols*row+col plt.subplot(n_rows,n_cols,index+1) plt.imshow(x_data[index],cmap='binary', interpolation='nearest') plt.axis('off') plt.title(class_names[y_data[index]]) plt.show()# 打印n_rows行n_cols列的图片 class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']# 所对应的名称show_images(3,5,x_train,y_train,class_names) Out[6]: In[9]: 1234567891011121314151617181920212223242526272829303132333435363738394041# 构建一个三层的神经网络# model=keras.models.Sequential()# model.add(keras.layers.Flatten(input_shape=[28,28])) # 展开成28*28的向量# model.add(keras.layers.Dense(300,activation='relu')) # 全链接层，层数300，激活函数relu# model.add(keras.layers.Dense(100,activation='relu')) # model.add(keras.layers.Dense(10,activation='softmax')) # 有10个输出# model=keras.models.Sequential([# keras.layers.Flatten(input_shape=[28,28]),# keras.layers.Dense(300,activation='relu'),# keras.layers.Dense(100,activation='relu'),# keras.layers.Dense(10,activation='softmax')# ])model=keras.models.Sequential()model.add(keras.layers.Flatten(input_shape=[28,28]))for _ in range(20): model.add(keras.layers.Dense(100,activation='selu')) # model.add(keras.layers.Dense(100,activation='relu')) # model.add(keras.layers.BatchNormalization()) # 激活函数在前的后的批归一化 # model.add(keras.layers.Dense(100)) # model.add(keras.layers.BatchNormalization()) # model.add(keras.layers.Activation('relu')) # model.add(keras.layers.Dropout(rate=0.5))model.add(keras.layers.AlphaDropout(rate=0.5))# AlphaDropout与Dropout的区别：1、均值方差不变 2、归一化性质不变model.add(keras.layers.Dense(10,activation='softmax'))# relu: y=max(0,x)# softmax: 将向量变成概率分布 x=[x1,x2,x3]# y=[e^x1/sum,e^x2/sum,e^x3/sum],sum=e^x1+e^x2+e^x3# reason for sparse: y-&gt;index y-&gt;one_hot-&gt;[]model.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy']) tensorflow.keras.model.compile In[10]: 1model.layers Out[7]: [&lt;tensorflow.python.keras.layers.core.Flatten at 0x136ef6a90&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x136ef6ad0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x136eb5f90&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13689dcd0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x136ed6990&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x136894090&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13689b450&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13689b110&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x111477050&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a68c7d0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x1114bd810&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a7035d0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a6a9050&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a6a9bd0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x107df4650&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x107e2b410&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a724910&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13a6dd210&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13e4b1b90&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x137080b10&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x13e4a1a10&gt;, &lt;tensorflow.python.keras.layers.noise.AlphaDropout at 0x136ed69d0&gt;, &lt;tensorflow.python.keras.layers.core.Dense at 0x1370af710&gt;]In[11]: 1model.summary() #打印模型的结构 Out[8]: Model: &quot;sequential&quot; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= flatten (Flatten) (None, 784) 0 _________________________________________________________________ dense (Dense) (None, 100) 78500 _________________________________________________________________ dense_1 (Dense) (None, 100) 10100 _________________________________________________________________ dense_2 (Dense) (None, 100) 10100 _________________________________________________________________ dense_3 (Dense) (None, 100) 10100 _________________________________________________________________ dense_4 (Dense) (None, 100) 10100 _________________________________________________________________ dense_5 (Dense) (None, 100) 10100 _________________________________________________________________ dense_6 (Dense) (None, 100) 10100 _________________________________________________________________ dense_7 (Dense) (None, 100) 10100 _________________________________________________________________ dense_8 (Dense) (None, 100) 10100 _________________________________________________________________ dense_9 (Dense) (None, 100) 10100 _________________________________________________________________ dense_10 (Dense) (None, 100) 10100 _________________________________________________________________ dense_11 (Dense) (None, 100) 10100 _________________________________________________________________ dense_12 (Dense) (None, 100) 10100 _________________________________________________________________ dense_13 (Dense) (None, 100) 10100 _________________________________________________________________ dense_14 (Dense) (None, 100) 10100 _________________________________________________________________ dense_15 (Dense) (None, 100) 10100 _________________________________________________________________ dense_16 (Dense) (None, 100) 10100 _________________________________________________________________ dense_17 (Dense) (None, 100) 10100 _________________________________________________________________ dense_18 (Dense) (None, 100) 10100 _________________________________________________________________ dense_19 (Dense) (None, 100) 10100 _________________________________________________________________ alpha_dropout (AlphaDropout) (None, 100) 0 _________________________________________________________________ dense_20 (Dense) (None, 10) 1010 ================================================================= Total params: 271,410 Trainable params: 271,410 Non-trainable params: 0 _________________________________________________________________In[12]: 1# 第一层 [None, 784] * w + b -&gt; [None, 300] w.shape=[784,300], b=[300] In[13]: 123456789101112131415# TensorBoard,EarlyStopping,ModelCheckPointlogdir='./dnn-selu-dropout-callbacks' # 设置一个文件夹路径if not os.path.exists(logdir): # 若文件夹不存在，则创建文件夹 os.mkdir(logdir)output_model_file=os.path.join(logdir, 'fashion_mnist_model.h5') #放入文件夹内，文件名fashion_mnist_model.h5callbacks=[ keras.callbacks.TensorBoard(logdir), keras.callbacks.ModelCheckpoint(output_model_file, save_best_only=True), # 保存最好的模型，如果不是这个会默认保存最近的一个模型 keras.callbacks.EarlyStopping(patience=5,min_delta=1e-3)]history=model.fit(x_train_scaled,y_train,epochs=10, validation_data=(x_valid_scaled,y_valid), callbacks=callbacks) tensorflow.keras.model.fit Out[9]: Train on 55000 samples, validate on 5000 samples Epoch 1/10 55000/55000 [==============================] - 11s 195us/sample - loss: 0.6998 - accuracy: 0.7617 - val_loss: 0.5656 - val_accuracy: 0.8536 Epoch 2/10 55000/55000 [==============================] - 8s 144us/sample - loss: 0.4626 - accuracy: 0.8428 - val_loss: 0.6195 - val_accuracy: 0.8558 Epoch 3/10 55000/55000 [==============================] - 9s 162us/sample - loss: 0.4065 - accuracy: 0.8581 - val_loss: 0.5300 - val_accuracy: 0.8668 Epoch 4/10 55000/55000 [==============================] - 8s 142us/sample - loss: 0.3755 - accuracy: 0.8717 - val_loss: 0.6154 - val_accuracy: 0.8664 Epoch 5/10 55000/55000 [==============================] - 8s 152us/sample - loss: 0.3521 - accuracy: 0.8774 - val_loss: 0.5287 - val_accuracy: 0.8766 Epoch 6/10 55000/55000 [==============================] - 8s 153us/sample - loss: 0.3343 - accuracy: 0.8815 - val_loss: 0.4956 - val_accuracy: 0.8856 Epoch 7/10 55000/55000 [==============================] - 8s 143us/sample - loss: 0.3193 - accuracy: 0.8857 - val_loss: 0.5349 - val_accuracy: 0.8716 Epoch 8/10 55000/55000 [==============================] - 8s 144us/sample - loss: 0.3085 - accuracy: 0.8916 - val_loss: 0.5294 - val_accuracy: 0.8842 Epoch 9/10 55000/55000 [==============================] - 8s 145us/sample - loss: 0.2955 - accuracy: 0.8946 - val_loss: 0.4668 - val_accuracy: 0.8822 Epoch 10/10 55000/55000 [==============================] - 8s 152us/sample - loss: 0.2839 - accuracy: 0.8975 - val_loss: 0.4907 - val_accuracy: 0.8860In[14]: 1type(history) Out[10]: tensorflow.python.keras.callbacks.HistoryIn[15]: 12history.history# 打印每次学习的结果 Out[11]: {&apos;loss&apos;: [0.6997782779043371, 0.4625766654621471, 0.4064591264659708, 0.37553091496554286, 0.35207060631621967, 0.3343261710730466, 0.3193407494176518, 0.30854321794509887, 0.29552189791636035, 0.28390346760099583], &apos;accuracy&apos;: [0.76165456, 0.84276366, 0.85809094, 0.8717273, 0.87743634, 0.8814909, 0.8856909, 0.89156365, 0.89461815, 0.8974909], &apos;val_loss&apos;: [0.5656432386219501, 0.6194551657661795, 0.5299783393919468, 0.6153697894215584, 0.5287225459891837, 0.49561948866695166, 0.5348633618405322, 0.5294362505242228, 0.4668049536377192, 0.4907300000913441], &apos;val_accuracy&apos;: [0.8536, 0.8558, 0.8668, 0.8664, 0.8766, 0.8856, 0.8716, 0.8842, 0.8822, 0.886]}In[16] 12345678def plot_learning_curves(history): pd.DataFrame(history.history).plot(figsize=(8,5)) plt.grid(True) plt.gca().set_ylim(0,1) plt.show()# 打印学习曲线plot_learning_curves(history) Out[12]: In[17]: 1model.evaluate(x_test_scaled,y_test) # 在测试集上验证 tensorflow.keras.model.evaluate Out[13]: 10000/10000 [==============================] - 1s 95us/sample - loss: 0.5799 - accuracy: 0.8741Out[14]: [0.5799049034297467, 0.8741]汇总： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226#!/usr/bin/env python# coding: utf-8# In[1]:import sslssl._create_default_https_context = ssl._create_unverified_context# 不知道为什么在本地的jupyter notebook上无法导入fashion_mnist数据集(本地需要，google colab不需要)# In[23]:import matplotlib as mplimport matplotlib.pyplot as pltget_ipython().run_line_magic('matplotlib', 'inline')import numpy as npimport sklearn import pandas as pdimport osimport sysimport timeimport tensorflow as tffrom tensorflow import keras as kerasfrom sklearn.preprocessing import StandardScalerfor module in mpl,np,pd,sklearn,tf,keras: print(module.__name__,module.__version__)# 打印版本库# In[3]:fashion_mnist=keras.datasets.fashion_mnist(x_train_all, y_train_all),(x_test, y_test)=fashion_mnist.load_data()# 导入fashion_mnist数据集# In[4]:x_valid,x_train=x_train_all[:5000],x_train_all[5000:]y_valid,y_train=y_train_all[:5000],y_train_all[5000:]# fashion_mnist有6w个数据，前5k个为验证集，其中x为图片，y为序列号print(x_valid.shape,y_valid.shape)print(x_train.shape,y_valid.shape)print(x_test.shape,y_test.shape)# 打印数据集的格式# In[5]:print(np.max(x_train),np.min(x_train))# 打印数据集中的最大值和最小值# In[6]:# x= (x-u)/stdscaler=StandardScaler()# x_train:[None, 28, 28] -&gt; [None, 784]x_train_scaled=scaler.fit_transform(x_train.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) #会自动记录方差u和均值std，并进行归一化x_valid_scaled=scaler.transform(x_valid.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) # 会根据自动记录的方差u和均值std进行归一化x_test_scaled=scaler.transform(x_test.astype(np.float32).reshape(-1,1)).reshape(-1,28,28) # 会根据自动记录的方差u和均值std进行归一化# In[7]:def show_single_image(img_arr): plt.imshow(img_arr,cmap='binary') plt.show()# 打印单张图片 show_single_image(x_train[0])# In[8]:def show_images(n_rows,n_cols,x_data,y_data,class_names): assert len(x_data)==len(y_data) assert n_cols*n_rows&lt;len(x_data) plt.figure(figsize=(n_cols*1.4,n_rows*1.6)) for row in range(n_rows): for col in range(n_cols): index=n_cols*row+col plt.subplot(n_rows,n_cols,index+1) plt.imshow(x_data[index],cmap='binary', interpolation='nearest') plt.axis('off') plt.title(class_names[y_data[index]]) plt.show()# 打印n_rows行n_cols列的图片 class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']# 所对应的名称show_images(3,5,x_train,y_train,class_names)# In[9]:# 构建一个三层的神经网络# model=keras.models.Sequential()# model.add(keras.layers.Flatten(input_shape=[28,28])) # 展开成28*28的向量# model.add(keras.layers.Dense(300,activation='relu')) # 全链接层，层数300，激活函数relu# model.add(keras.layers.Dense(100,activation='relu')) # model.add(keras.layers.Dense(10,activation='softmax')) # 有10个输出# model=keras.models.Sequential([# keras.layers.Flatten(input_shape=[28,28]),# keras.layers.Dense(300,activation='relu'),# keras.layers.Dense(100,activation='relu'),# keras.layers.Dense(10,activation='softmax')# ])model=keras.models.Sequential()model.add(keras.layers.Flatten(input_shape=[28,28]))for _ in range(20): model.add(keras.layers.Dense(100,activation='selu')) # model.add(keras.layers.Dense(100,activation='relu')) # model.add(keras.layers.BatchNormalization()) # 激活函数在前的后的批归一化 # model.add(keras.layers.Dense(100)) # model.add(keras.layers.BatchNormalization()) # model.add(keras.layers.Activation('relu')) # model.add(keras.layers.Dropout(rate=0.5))model.add(keras.layers.AlphaDropout(rate=0.5))# AlphaDropout与Dropout的区别：1、均值方差不变 2、归一化性质不变model.add(keras.layers.Dense(10,activation='softmax'))# relu: y=max(0,x)# softmax: 将向量变成概率分布 x=[x1,x2,x3]# y=[e^x1/sum,e^x2/sum,e^x3/sum],sum=e^x1+e^x2+e^x3# reason for sparse: y-&gt;index y-&gt;one_hot-&gt;[]model.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy']) # In[10]:model.layers# In[11]:model.summary() #打印模型的结构# In[12]:# 第一层 [None, 784] * w + b -&gt; [None, 300] w.shape=[784,300], b=[300]# In[15]:# TensorBoard,EarlyStopping,ModelCheckPointlogdir='./dnn-selu-dropout-callbacks' # 设置一个文件夹路径if not os.path.exists(logdir): # 若文件夹不存在，则创建文件夹 os.mkdir(logdir)output_model_file=os.path.join(logdir, 'fashion_mnist_model.h5') #放入文件夹内，文件名fashion_mnist_model.h5callbacks=[ keras.callbacks.TensorBoard(logdir), keras.callbacks.ModelCheckpoint(output_model_file, save_best_only=True), # 保存最好的模型，如果不是这个会默认保存最近的一个模型 keras.callbacks.EarlyStopping(patience=5,min_delta=1e-3)]history=model.fit(x_train_scaled,y_train,epochs=10, validation_data=(x_valid_scaled,y_valid), callbacks=callbacks)# In[16]:type(history)# In[17]:history.history# 打印每次学习的结果# In[18]:def plot_learning_curves(history): pd.DataFrame(history.history).plot(figsize=(8,5)) plt.grid(True) plt.gca().set_ylim(0,1) plt.show()# 打印学习曲线plot_learning_curves(history) # In[19]:model.evaluate(x_test_scaled,y_test) # 在测试集上验证","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://uscair.club/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"DNN","slug":"DNN","permalink":"http://uscair.club/tags/DNN/"},{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://uscair.club/tags/TensorFlow/"}],"author":{"name":"Gowi"}},{"title":"机器学习系列（三）——误差（error），偏差（bias），方差（variance）","slug":"机器学习系列（三）——误差（error），偏差（bias），方差（variance）","date":"2020-02-17T08:25:19.546Z","updated":"2020-02-17T08:25:19.546Z","comments":true,"path":"2020/02/17/机器学习系列（三）——误差（error），偏差（bias），方差（variance）/","link":"","permalink":"http://uscair.club/2020/02/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%AF%AF%E5%B7%AE%EF%BC%88error%EF%BC%89%EF%BC%8C%E5%81%8F%E5%B7%AE%EF%BC%88bias%EF%BC%89%EF%BC%8C%E6%96%B9%E5%B7%AE%EF%BC%88variance%EF%BC%89/","excerpt":"","text":"机器学习系列（三）——误差（error），偏差（bias），方差（variance）训练机器学习模型时，我们希望得到一个泛化性能优异的模型。在上一篇博客回归模型中，当我们采用多项式回归，并不断增加多项式的次数时，模型越来越复杂，但是在测试集上的误差并没有逐步降低。 这表明一个复杂的模型并不总是能在测试集上表现出更好的性能，那么误差来自哪里呢？ 泛化误差（error）我们知道，算法在不同训练集上学得的结果很可能不同，即便这些训练集是来自于同一个分布。以回归任务为例，对测试样本x，令yD为x在数据集上的标记，y为x的真实标记，由于噪声的存在，有可能yD≠y,f(x;D)为在训练集D上学得函数f对x的预测输出。因此，算法的期望预测（在不同训练集上学得的模型对样本x的结果的预测值的均值）可以表示为 不同训练集学得的函数f的预测输出的方差（variance）为 期望输出与真实标记之间的差距称为偏差（bias），即 噪声为 为方便讨论，假定噪声期望为零，即ED[yD−y]=0。算法的期望泛化误差（也采用平方误差度量）为 式中，第一个加红公式等于0，因为fˉ(x)−yD是一个标量，而根据期望预测公式fˉ(x)=ED[f(x;D)]，我们可以得到ED[(f(x;D)−f¯(x))]=0，所以整个加红式子的值为0。同理第二个加红公式等于0，因为噪声期望为0。于是 也就是说，泛化误差可分解为偏差、方差与噪声之和。噪声无法人为控制，所以通常我们认为 现在知道了泛化误差来自哪，就需要进行针对性控制。 偏差（bias）与方差（variance）根据上面的定义，偏差（bias）反映了模型在样本上的期望输出与真实标记之间的差距，即模型本身的精准度，反映的是模型本身的拟合能力。方差（variance）反映了模型在不同训练数据集下学得的函数的输出与期望输出之间的误差，即模型的稳定性，反应的是模型的波动情况。下面用打靶的例子直观展示了偏差和方差。 图中红色的靶心表示测试样本的真实标记，蓝色的点表示模型在不同训练集上选出的函数的输出。第一列的两个图中，蓝色的点都比较集中，说明模型的稳定性好，也就是方差小；第一行的两个图中，蓝色点的中心都比较靠近红色靶心，说明模型的拟合能力强，也就是偏差小。所以总结如下：low bias and low variance：又准又稳low bias and high variance： 准但不稳high bias and low variance：不准但稳high bias and high variance：不准又不稳那模型和偏差、方差之间的对应关系是什么样呢？还是以回归任务为例，看一个极端例子，y=c ，不论模型的训练数据如何变化，学得的函数都不会变，因此f(x;D)的输出都相同，即模型的稳定性非常好，但是对训练集的拟合也不是很好，显然对于测试样本的预测也不会很准确，这种对训练集刻画不足的情况，称为欠拟合（underfitting）。逐渐增加模型的复杂度，学得的函数对训练数据的拟合越来越好 但是，对于一个复杂的模型，当我们稍微改变训练样本时，学得的函数差距将非常的大 这说明复杂的模型对训练样本拟合很好，但是模型的波动性也很大，很可能在测试样本的表现非常差。可以理解为，复杂的模型将训练样本的特性当作全体样本的通性，将噪声引入了模型中，这种现象称之为过拟合（overfitting）。所以我们需要在模型复杂度之间权衡，使偏差和方差得以均衡（trade-off），这样模型的整体误差才会最小。 欠拟合和过拟合应对策略欠拟合（刻画不够） 寻找更好的特征，提升对数据的刻画能力 增加特征数量 重新选择更加复杂的模型 过拟合（刻画太细，泛化太差） 增加训练样本数量，样本多了，噪声比中就减少了 减少特征维数，高维空间密度小 加入正则化项，使得模型更加平滑 模型选择同一模型在不同训练集上学得的函数往往不同，那我们怎样才能选出最好的模型和最好的函数呢？可以采用交叉验证（Cross Validation）法，其基本思路如下：将训练集划分为K份，每次采用其中K-1份作为训练集，另外一份作为验证集，在训练集上学得函数后，然后在验证集上计算误差。再次选择另外K-1份数据再次重复上述过程，最终模型的误差为学得的K个函数的误差的平均值，并依据此值选择最佳模型，最后在整个训练集上训练选择的最佳模型，并在测试集上进行测试。 同时，交叉验证也解决了上面说的variance（不同训练集学得的函数的差异）和bias（不同函数的平均值）两大问题。说白了，交叉验证验证了你的模型是否够精确，够稳定，不能说在某个数据集上表现好就可以，你做的模型是要放在整个数据集上来看的，毕竟泛化能力才是机器学习的核心。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Wonder"}},{"title":"智能算法","slug":"智能算法","date":"2020-02-16T11:58:00.000Z","updated":"2020-02-16T11:58:00.000Z","comments":true,"path":"2020/02/16/智能算法/","link":"","permalink":"http://uscair.club/2020/02/16/%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/","excerpt":"","text":"一、简介什么是群体智能优化算法群体智能优化算法属于一种生物启发式方法。群体智能优化算法主要模拟了昆虫、兽群、鸟群和鱼群的群集行为，这些群体按照一种合作的方式寻找食物，群体中的每个成员通过学习它自身的经验和其他成员的经验来不断地改变搜索的方向。群体智能优化算法的突出特点就是利用了种群的群体智慧进行协同搜索，从而在解空间内找到最优解。 二、群体智能优化算法1.常见的群体智能优化算法分类常见的群体智能优化算法主要有如下几类： （1）蚁群算法（Ant Colony Optimization，简称ACO）[1992年提出]； （2）粒子群优化算法（Particle Swarm Optimization，简称PSO）[1995年提出]（简单易于实现，也是目前应用最为广泛的群体智能优化算法）； （3）菌群优化算法（Bacterial Foraging Optimization，简称BFO）[2002年提出]； （4）蛙跳算法（Shuffled Frog Leading Algorithm，简称SFLA）[2003年提出]； （5）人工蜂群算法（Artificial Bee Colony Algorithm，简称ABC）[2005年提出]； 除了上述几种常见的群体智能算法以外，还有一些并不是广泛应用的群体智能算法，比如萤火虫算法、布谷鸟算法、蝙蝠算法以及磷虾群算法等等。 2.粒子群优化算法思想 粒子群优化算法是在1995年由Eberhart博士和Kennedy博士一起提出的，它源于对鸟群捕食行为的研究。它的基本核心是利用群体中的个体对信息的共享从而使得整个群体的运动在问题求解空间中产生从无序到有序的演化过程，从而获得问题的最优解。我们可以利用一个有关PSO的经典描述来对PSO算法进行一个直观的描述。设想这么一个场景：一群鸟进行觅食，而远处有一片玉米地，所有的鸟都不知道玉米地到底在哪里，但是它们知道自己当前的位置距离玉米地有多远。那么找到玉米地的最佳策略，也是最简单有效的策略就是是搜寻目前距离玉米地最近的鸟群的周围区域。PSO就是从这种群体觅食的行为中得到了启示，从而构建的一种优化模型。 在PSO中，每个优化问题的解都是搜索空间中的一只鸟，称之为“粒子”，而问题的最优解就对应为鸟群要寻找的“玉米地”。所有的粒子都具有一个位置向量（粒子在解空间的位置）和速度向量（决定下次飞行的方向和速度），并可以根据目标函数来计算当前的所在位置的适应值（fitness value），可以将其理解为距离“玉米地”的距离。在每次的迭代中，种群中的粒子除了根据自身的“经验”（历史位置）进行学习以外，还可以根据种群中最优粒子的“经验”来学习，从而确定下一次迭代时需要如何调整和改变飞行的方向和速度。就这样逐步迭代，最终整个种群的粒子就会逐步趋于最优解。 3. 粒子群优化算法的基本框架 在介绍PSO的算法流程之前，我们写给出PSO中常用的迭代算子的形式。代表粒子i的位置向量,代表粒子i的速度向量（其中n为优化问题的维度大小），最早版本的粒子群优化算法的迭代算子形式如下：其中在公式(1)中，Pbesti与Gbest分别代表粒子i历史最佳位置和种群历史最佳位置向量。根据公式(1)(2)可以看出，种群中的粒子通过不断地向自身和种群的历史信息进行学习，从而可以找出问题的最优解。 但是，在后续的研究中表明，上述原始的公式中存在一个问题：公式(1)中Vi的更新太具有随机性，从而使得整个PSO算法的全局优化能力很强，但是局部搜索能力较差。而实际上，我们需要在算法迭代初期PSO有着较强的全局优化能力，而在算法的后期，整个种群应该具有更强的局部搜索能力。所以根据上述的弊端，Shi和Eberhart通过引入惯性权重修改了公式(1)，从而提出了PSO的惯性权重模型：其中参数 w 称为是PSO的惯性权重(inertia weight)， w 为控制单个粒子之前速度影响以及对后续行为影响的内置权重，它的取值介于[0,1]区间，一般应用中均采取自适应的取值方法，即一开始令 w=0.9，使得PSO全局优化能力较强，随着迭代的深入，参数w进行递减，从而使得PSO具有较强的局部优化能力，当迭代结束时，w=0.1。参数 c1 和 c2 称为是学习因子(learn factor)，一般设置为1.4961；而 r1 和 r2 为介于[0,1]之间的随机概率值。(可以用rand()代替，rand()为 0~1 之间的归一化随机数) 整个粒子群优化算法的算法框架如下： Step 1 种群初始化：可以进行随机初始化或者根据被优化的问题设计特定的初始化方法，然后计算个体的适应值，从而选择出个体的局部最优位置向量Pbesti和种群全局最优位置向量Gbest。 Step 2 迭代设置：设置迭代次数 gmax，并令当前迭代次数 g=1; Step 3 速度更新：根据公式（3）更新每个个体的速度向量； Step 4 位置更新：根据公式（2）更新每个个体的位置向量； Step 5 局部位置向量和全局位置向量更新：更新每个个体的Pbesti和Gbest ； Step 6终止条件判断：判断迭代次数时都达到 gmax 。如果满足，输出 Gbest否则继续进行迭代，跳转至 Step 3 。 对于粒子群优化算法的运用，主要是对速度和位置向量迭代算子的设计。迭代算子是否有效将决定整个PSO算法性能的优劣，所以如何设计PSO的迭代算子是PSO算法应用的研究重点和难点。","categories":[{"name":"智能算法","slug":"智能算法","permalink":"http://uscair.club/categories/%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"AI大数据","slug":"AI大数据","permalink":"http://uscair.club/tags/AI%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"author":{"name":"戴挽舟（BbiHH）"}},{"title":"STM32单片机系列（二）","slug":"32串口通信 (2)","date":"2020-02-15T16:00:00.000Z","updated":"2020-02-15T16:00:00.000Z","comments":true,"path":"2020/02/16/32串口通信 (2)/","link":"","permalink":"http://uscair.club/2020/02/16/32%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%20(2)/","excerpt":"","text":"串口通信与配置：串行通信 同步通信带时钟如：SPI,IIC。 异步通信：不带有时钟信号UART。 同步通信一般都有同步时钟全双工一般都有独立的发送和接收的引脚半双工一般只要一个共用的发送和接收的引脚 STM32串口通信的接口：UART通用异步收发器，USART 通用同步异步收发器，使用了RS232接口，使不同的设备可以进行方便的通讯。其全名为：数据终端设备(DTE)和数据通讯设备(DCE)之间串行二进制数据交换接口技术标准。(有9针或25针的D型插头，一般为9针插头)。 STM32串口通信UART异步通信预先定义： 起始位 数据位（8位或者9位） 奇偶校验位（第9位） 停止位（1，15，2位） 波特率设置 STM32串口1和6使用PCLK2(x=2) 2-5s使用PCLK1(x=1)STM32F4 给IO的中断线为0-15一共16个中断线对应112（16x7）个IO口。 每一个中断线可以映射的IO口有7个但是同组IO口里面一次只能有一个IO口占用中断线。如（PA0-PG0）是一组可以映射到中断线EXTI0但是一次只能有其中的一个IO口映射上去。每一个中断线可以设置它的触发方式（上升沿触发，下降沿触发，边沿触发【上升沿的下降沿都可以触发】）和使能位状态位。IO在外部中断向量里面只分配了7个中断服务函数0，1，2，3，4，5-9，10-15库函数：SYSCFG_EXTILineConfig(EXIT_PortSourceGPIOE,EXIT_PinSource2)【把PE2口连接到中断线2】为IO设置对应的中断线EXTI_Init()【】初始化中断线上的触发方式。EXIT_GetITStatus()判断中断线上的中断是否发生EXIT_ClearITPendingBit（）清楚对应线上的中断标志位。RCC_APB2PeriphClockCmd（）使能对应中断的时钟EXIT_IRQHandler（）对应的中断服务函数（发生中断就跳转至函数里面）","categories":[{"name":"单片机","slug":"单片机","permalink":"http://uscair.club/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"STM32F407","slug":"STM32F407","permalink":"http://uscair.club/tags/STM32F407/"}],"author":{"name":"Page"}},{"title":"关于numpy矩阵运算的小记","slug":"关于numpy矩阵运算的小记","date":"2020-02-15T16:00:00.000Z","updated":"2020-02-15T16:00:00.000Z","comments":true,"path":"2020/02/16/关于numpy矩阵运算的小记/","link":"","permalink":"http://uscair.club/2020/02/16/%E5%85%B3%E4%BA%8Enumpy%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E7%9A%84%E5%B0%8F%E8%AE%B0/","excerpt":"","text":"关于numpy矩阵运算的小记[toc] 发现做矩阵处理是numpy忘了好多，所以记录下来. array与matrixmatrix是array的分支，matrix和array在很多时候都是通用的，你用哪一个都一样。但这时候，官方建议大家如果两个可以通用，那就选择array，因为array更灵活，速度更快，很多人把二维的array也翻译成矩阵。但是matrix的优势就是相对简单的运算符号，比如两个矩阵相乘，就是用符号*，但是array相乘不能这么用，得用方法.dot()array的优势就是不仅仅表示二维，还能表示3、4、5…维，而且在大部分Python程序里，array也是更常用的。 123456789101112import numpy as npa1 = np.array([[1, 2], [3, 4]])a2 = np.array([[5, 6], [7, 8]])b1 = np.mat([[1, 2], [3, 4]])b2 = np.mat([[5, 6], [7, 8]])print((np.dot(a1, a2)).all() == (b1 * b2).all()) 输出 True 矩阵判等在矩阵判等中存在各个元素相等和整个矩阵相等两种情况 1234567891011121314import numpy as npa1 = np.array([[1, 2], [3, 4]])a2 = np.array([[5, 6], [7, 8]])b1 = np.mat([[1, 2], [3, 4]])b2 = np.mat([[5, 6], [7, 8]])print('np.dot(a1, a2):\\n', np.dot(a1, a2))print('b1 * b2:\\n', b1 * b2)print((np.dot(a1, a2)) == (b1 * b2))print((np.dot(a1, a2)).all() == (b1 * b2).all()) 输出： 其中==用于判等各个元素相等，用all()方法可以判断整个矩阵相等 矩阵的连接在numpy中存在按行连接与按列连接两种形式 1234567891011121314151617import numpy as npx = np.array([[1, 2, 3], [4, 5, 6]])print(\"x:\\n\", x)y = np.array([[7, 8, 9], [10, 11, 12]])print(\"y:\\n\", y)z = np.array([[13, 14, 15]])print(\"z:\\n\", z)a = np.vstack((x, y, z))print('np.vstack((x,y,z)):\\n', a)b = np.hstack((x, y))print('np.hstack((x,y)):\\n', b) 输出： 其中np.hstack()是按行连接：行数相同的的连接在一起；np.vstack()按列连接：列书相同的连接在一起。 矩阵的向量化在矩阵中我们可以使用reshape方法来实现矩阵的向量化，如果在整形操作中将尺寸标注为-1，则会自动计算其他尺寸 1234567891011121314151617181920import numpy as npx = np.array([[1, 2, 3], [4, 5, 6]])print(\"x:\\n\", x)y = np.array([[7, 8, 9], [10, 11, 12]])print(\"y:\\n\", y)z = np.array([[13, 14, 15]])print(\"z:\\n\", z)a = np.vstack((x, y, z))print('np.vstack((x,y,z)):\\n', a)b = np.hstack((x, y))print('np.hstack((x,y)):\\n', b)print(a.shape)print(a.reshape(-1,1)) 输出： 矩阵的拆分使用hsplit，您可以沿数组的水平轴拆分数组，方法是指定要返回的形状相同的数组的数量，或者指定要在其后进行划分的列，使用vsplit，您可以沿数组的竖直轴拆分数组，方法是指定要返回的形状相同的数组的数量，或者指定要在其后进行划分的列。 12345678import numpy as npa = np.array([[1, 1, 2, 3], [1, 5, 7, 3], [7, 3, 9, 3], [1, 7, 3, 0]])print(np.hsplit(a, 2))print(np.vsplit(a, 2)) 矩阵的复制用=的简单分配不会复制数组对象或其数据，该copy方法对数组及其数据进行完整复制。 12345678910111213import numpy as npa = np.array([[1, 1, 2, 3], [1, 5, 7, 3], [7, 3, 9, 3], [1, 7, 3, 0]])# print(np.hsplit(a, 2))# print(np.vsplit(a, 2))b = aprint(id(a))print(id(b))c = a.copy()print(id(c)) 矩阵的逆 利用numpy.linalg.inv()可以求得矩阵的逆矩阵 123456789import numpy as npa = np.array([[1, 1, 2, 3], [1, 5, 7, 3], [7, 3, 9, 3], [1, 7, 3, 0]])b = np.linalg.inv(a)print(np.dot(a, b)) 矩阵的索引12345678910111213import numpy as npa = np.array([[1, 1, 2, 3], [1, 5, 7, 3], [7, 3, 9, 3], [1, 7, 3, 0]])print(a[2, 3]) # 输出第2+1行第3+1列的数字print(a[1:]) # 以矩阵形式输出从第1+1行开始的所有数print(a[1:3]) # 以矩阵形式输出第1+1到第3+1-1行的数print(a[:, 1]) # 输出矩阵的第1+1列的所有数print(a[0:3, 1]) # 输出矩阵从0+1行到第3+1-1行的第1+1列的所有数print(type(a[:3]))","categories":[{"name":"python基础","slug":"python基础","permalink":"http://uscair.club/categories/python%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Numpy","slug":"Numpy","permalink":"http://uscair.club/tags/Numpy/"}],"author":{"name":"Gowi"}},{"title":"卷积神经网络（二）","slug":"卷积神经网络（二）","date":"2020-02-15T16:00:00.000Z","updated":"2020-02-15T16:00:00.000Z","comments":true,"path":"2020/02/16/卷积神经网络（二）/","link":"","permalink":"http://uscair.club/2020/02/16/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"卷积神经网络中全连接，局部连接和权值共享卷积神经网络与一般神经网络不同在于其连接还具有局部连接和参数共享的特点。依据上图：全连接连接个数：nm（左图） 局部连接连接个数：im（这一层的某个节点只与上一层的部分节点相连） 依据上图：权值不共享且仅为局部连接权值参数为：3*4=12 权值共享参数为：3","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"CNN","slug":"CNN","permalink":"http://uscair.club/tags/CNN/"}],"author":{"name":"ffffff"}},{"title":"神经网络--反向传播算法推导","slug":"神经网络--反向传播算法推导","date":"2020-02-12T16:00:00.000Z","updated":"2020-02-12T16:00:00.000Z","comments":true,"path":"2020/02/13/神经网络--反向传播算法推导/","link":"","permalink":"http://uscair.club/2020/02/13/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C--%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95%E6%8E%A8%E5%AF%BC/","excerpt":"","text":"概述以监督学习为例，假设我们有训练样本集$(x^{(i)},y^{(i)})$，那么神经网络算法能提供一种复杂且非线性的假设模型$h_{(W,b)}(x)$,它具有参数$W$，$b$，可以以此参数来拟合我们的数据。 为了描述神经网络，我们先从最简单的神经网络讲起，这个神经网络仅由一个“神经元”构成，以下即是这个“神经元”的图示： 这个神经元是一个以$x_1,x_2,x_3$以及截距+1为输入值的运算单元，其输出为$h_{(W,b)}(x)=f(W^Tx)=f(\\overset{3}{\\underset{i=1}{\\sum}}W_iX_i+b)$,其中函数$f:\\mathbb{R}\\to\\mathbb{R}$被称为激活函数 我们选用$sigmoid$函数为激活函数$$f(z)=\\frac{1}{1+e^{-z}}$$可以看出，这个单一“神经元”的输入－输出映射关系其实就是一个逻辑回归（logistic regression）。 我们采用$sigmoid$函数 其中$f’(z)=f(z)(1-f(z))$,如果是$tanh$函数，则$f’(z)=1-(f(z))^2$。 神经网络模型所谓神经网络就是将许多个单一“神经元”联结在一起，这样，一个“神经元”的输出就可以是另一个“神经元”的输入。例如，下图就是一个简单的神经网络： 我们使用圆圈来表示神经网络的输入，标上“+1”的圆圈被称为偏置节点，也就是截距项。神经网络最左边的一层叫做输入层，最右的一层叫做输出层（本例中，输出层只有一个节点）。中间所有节点组成的一层叫做隐藏层，因为我们不能在训练样本集中观测到它们的值。同时可以看到，以上神经网络的例子中有3个输入单元（偏置单元不计在内），3个隐藏单元及一个输出单元。 我们用$n_l$来表示网络的层数，本例中 $\\textstyle n_l=3$ ，我们将第 $\\textstyle l$ 层记为 $\\textstyle L_l$ ，于是$\\textstyle L_1$ 是输入层，输出层是 $\\textstyle L_{n_l}$ 。本例神经网络有参数 $\\textstyle (W,b) = (W^{(1)}, b^{(1)}, W^{(2)}, b^{(2)})$ ，其中$\\textstyle W^{(l)}_{ij}$（下面的式子中用到）是第 $\\textstyle l$ 层第 $\\textstyle j$ 单元与第 $\\textstyle l+1$ 层第 $i$ 单元之间的联接参数（其实就是连接线上的权重，注意标号顺序）， $\\textstyle b^{(l)}_i$ 是第 $\\textstyle l+1$ 层第$i$单元的偏置项。因此在本例中， $\\textstyle W^{(1)} \\in \\Re^{3\\times 3}$ ， $\\textstyle W^{(2)} \\in \\Re^{1\\times 3}$ 。注意，没有其他单元连向偏置单元(即偏置单元没有输入)，因为它们总是输出 $\\textstyle +1$。同时，我们用 $\\textstyle s_l$ 表示第 $\\textstyle l$ 层的节点数（偏置单元不计在内）。 我们用 $\\textstyle a^{(l)}_i$ 表示第 $\\textstyle l$层第 $\\textstyle i$ 单元的激活值（输出值）。当$\\textstyle l=1$ 时，$ \\textstyle a^{(1)}_i = x_i $，也就是第 $\\textstyle i$ 个输入值（输入值的第$\\textstyle i$个特征)。对于给定参数集合 $\\textstyle W,b$，我们的神经网络就可以按照函数 $\\textstyle h_{W,b}(x)$ 来计算输出结果。本例神经网络的计算步骤如下：$$a_1^{(2)}=f(W_{11}^{(1)}x_1+W_{12}^{(1)}x_2+W_{13}^{(1)}x_3+b_1^{(1)})\\a_1^{(2)}=f(W_{21}^{(1)}x_1+W_{22}^{(1)}x_2+W_{23}^{(1)}x_3+b_1^{(1)})\\a_1^{(2)}=f(W_{31}^{(1)}x_1+W_{32}^{(1)}x_2+W_{33}^{(1)}x_3+b_1^{(1)})\\h_{W,b}(x)=a_1^{(3)}=f(W_{11}^{(2)}a_1^{(2)}+W_{12}^{(2)}a_2^{(2)}+W_{13}^{(2)}a_3^{(2)}+b_1^{(2)})$$我们用 $\\textstyle z^{(l)}_i$ 表示第$\\textstyle l$ 层第 $\\textstyle i$ 单元输入加权和（包括偏置单元），比如， $\\textstyle z_i^{(2)} = \\sum_{j=1}^n W^{(1)}_{ij} x_j + b^{(1)}_i$ ，则 $\\textstyle a^{(l)}_i = f(z^{(l)}_i)$ 。 这样我们就可以得到一种更简洁的表示法。这里我们将激活函数 $\\textstyle f(\\cdot)$ 扩展为用向量（分量的形式）来表示，即 $\\textstyle f([z_1, z_2, z_3]) = [f(z_1), f(z_2), f(z_3)]$，那么，上面的等式可以更简洁地表示为：$$z^{(2)}=W^{(1)}x+b^{(1)}\\a^{(2)}=f(z^{(2)})\\z^{(3)}=W^{(2)}x+b^{(2)}\\h_{W,b}(x)=a^{(3)}=f(z^{(3)})$$我们将上面的计算步骤叫作前向传播。回想一下，之前我们用 $\\textstyle a^{(1)} = x$ 表示输入层的激活值，那么给定第 $\\textstyle l$的激活值 $\\textstyle a^{(l)}$ 后，第 $\\textstyle l+1$ 层的激活值 $\\textstyle a^{(l+1)}$ 就可以按照下面步骤计算得到：$$z^{(l+1)}=W^{(l)}a^{(l)}+b^{(l)}\\a^{(l+1)}=f(z^{(l+1)})$$将参数矩阵化，使用矩阵－向量运算方式，我们就可以利用线性代数的优势对神经网络进行快速求解。 目前为止，我们讨论了一种神经网络，我们也可以构建另一种结构的神经网络（这里结构指的是神经元之间的联接模式），也就是包含多个隐藏层的神经网络。最常见的一个例子是 $\\textstyle n_l$ 层的神经网络，第 $\\textstyle 1$ 层是输入层，第 $\\textstyle n_l$ 层是输出层，中间的每个层 $\\textstyle l$ 与层 $\\textstyle l+1$ 紧密相联。这种模式下，要计算神经网络的输出结果，我们可以按照之前描述的等式，按部就班，进行前向传播，逐一计算第 $\\textstyle L_2$ 层的所有激活值，然后是第 $\\textstyle L_3$ 层的激活值，以此类推，直到第 $\\textstyle L_{n_l}$层。这是一个前馈神经网络的例子，因为这种联接图没有闭环或回路。 神经网络也可以有多个输出单元。比如，下面的神经网络有两层隐藏层： $\\textstyle L_2$ 及 $\\textstyle L_3$ ，输出层 $\\textstyle L_4$ 有两个输出单元。 要求解这样的神经网络，需要样本集 $\\textstyle (x^{(i)}, y^{(i)})$ ，其中 $\\textstyle y^{(i)} \\in \\Re^2$ 。如果你想预测的输出是多个的，那这种神经网络很适用。（比如，在医疗诊断应用中，患者的体征指标就可以作为向量的输入值，而不同的输出值$\\textstyle y_i$可以表示不同的疾病存在与否。） 反向传导算法假设我们有一个固定样本集 $\\textstyle \\{ (x^{(1)}, y^{(1)}), \\ldots, (x^{(m)}, y^{(m)}) \\}$，它包含 $\\textstyle m$ 个样例。我们可以用批量梯度下降法来求解神经网络。具体来讲，对于单个样例 $\\textstyle (x,y)$)，其代价函数为：$$\\begin{align}J(W,b; x,y) = \\frac{1}{2} \\left| h_{W,b}(x) - y \\right|^2.\\end{align}$$这是一个（二分之一的）方差代价函数。给定一个包含 $\\textstyle m$ 个样例的数据集，我们可以定义整体代价函数为：$$\\begin{align}J(W,b)&amp;= \\left[ \\frac{1}{m} \\sum_{i=1}^m J(W,b;x^{(i)},y^{(i)}) \\right] + \\frac{\\lambda}{2} \\sum_{l=1}^{n_l-1} \\; \\sum_{i=1}^{s_l} \\; \\sum_{j=1}^{s_{l+1}} \\left( W^{(l)}_{ji} \\right)^2 \\\\&amp;= \\left[ \\frac{1}{m} \\sum_{i=1}^m \\left( \\frac{1}{2} \\left| h_{W,b}(x^{(i)}) - y^{(i)} \\right|^2 \\right) \\right] + \\frac{\\lambda}{2} \\sum_{l=1}^{n_l-1} \\; \\sum_{i=1}^{s_l} \\; \\sum_{j=1}^{s_{l+1}} \\left( W^{(l)}_{ji} \\right)^2\\end{align}$$以上关于$\\textstyle J(W,b)$定义中的第一项是一个均方差项。第二项是一个规则化项（也叫权重衰减项），其目的是减小权重的幅度，防止过度拟合。 [注：通常权重衰减的计算并不使用偏置项 $\\textstyle b^{(l)}_i$，比如我们在 $\\textstyle J(W, b)$ 的定义中就没有使用。一般来说，将偏置项包含在权重衰减项中只会对最终的神经网络产生很小的影响。在贝叶斯规则化方法中，我们将高斯先验概率引入到参数中计算MAP（极大后验）估计（而不是极大似然估计）。] 权重衰减参数 $\\textstyle \\lambda$ 用于控制公式中两项的相对重要性。在此重申一下这两个复杂函数的含义：$\\textstyle J(W,b;x,y)$ 是针对单个样例计算得到的方差代价函数；$\\textstyle J(W,b)$ 是整体样本代价函数，它包含权重衰减项。 以上的代价函数经常被用于分类和回归问题。在分类问题中，我们用 $\\textstyle y = 0$ 或 $\\textstyle 1$，来代表两种类型的标签（回想一下，这是因为 sigmoid激活函数的值域为 !$\\textstyle [0,1]$；如果我们使用双曲正切型激活函数，那么应该选用 $\\textstyle -1$ 和 $\\textstyle +1$ 作为标签）。对于回归问题，我们首先要变换输出值域（也就是$y$），以保证其范围为 $\\textstyle [0,1]$ （同样地，如果我们使用双曲正切型激活函数，要使输出值域为 $\\textstyle [-1,1]$）。 我们的目标是针对参数 $\\textstyle W$ 和 $\\textstyle b$ 来求其函数 $\\textstyle J(W,b)$ 的最小值。为了求解神经网络，我们需要将每一个参数 $\\textstyle W^{(l)}_{ij}$ 和 $\\textstyle b^{(l)}_i$ 初始化为一个很小的、接近零的随机值（比如说，使用正态分布 $\\textstyle {Normal}(0,\\epsilon^2)$ 生成的随机值，其中 $\\textstyle \\epsilon$ 设置为 $\\textstyle 0.01$ ），之后对目标函数使用诸如批量梯度下降法的最优化算法。因为 $\\textstyle J(W, b)$ 是一个非凸函数，梯度下降法很可能会收敛到局部最优解；但是在实际应用中，梯度下降法通常能得到令人满意的结果。最后，需要再次强调的是，要将参数进行随机初始化，而不是全部置为$\\textstyle 0$。如果所有参数都用相同的值作为初始值，那么所有隐藏层单元最终会得到与输入值有关的、相同的函数（也就是说，对于所有 $\\textstyle i$，$\\textstyle W^{(1)}_{ij}$都会取相同的值，那么对于任何输入 $\\textstyle x$ 都会有：$\\textstyle a^{(2)}_1 = a^{(2)}_2 = a^{(2)}_3 = \\ldots$ ）。随机初始化的目的是使对称失效。 梯度下降法中每一次迭代都按照如下公式对参数 $\\textstyle W$ 和$\\textstyle b$ 进行更新：$$\\begin{align}W_{ij}^{(l)} &amp;= W_{ij}^{(l)} - \\alpha \\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W,b) \\\\b_{i}^{(l)} &amp;= b_{i}^{(l)} - \\alpha \\frac{\\partial}{\\partial b_{i}^{(l)}} J(W,b)\\end{align}$$其中 $\\textstyle \\alpha$ 是学习速率。其中关键步骤是计算偏导数。我们现在来讲一下反向传播算法，它是计算偏导数的一种有效方法。 我们首先来讲一下如何使用反向传播算法来计算 $\\textstyle \\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W,b; x, y)$ 和 $\\textstyle \\frac{\\partial}{\\partial b_{i}^{(l)}} J(W,b; x, y)$，这两项是单个样例 $\\textstyle (x,y)$ 的代价函数 $\\textstyle J(W,b;x,y)$ 的偏导数。一旦我们求出该偏导数，就可以推导出整体代价函数$\\textstyle J(W,b)$的偏导数：$$\\begin{align}\\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W,b) &amp;=\\left[ \\frac{1}{m} \\sum_{i=1}^m \\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W,b; x^{(i)}, y^{(i)}) \\right] + \\lambda W_{ij}^{(l)} \\\\\\frac{\\partial}{\\partial b_{i}^{(l)}} J(W,b) &amp;=\\frac{1}{m}\\sum_{i=1}^m \\frac{\\partial}{\\partial b_{i}^{(l)}} J(W,b; x^{(i)}, y^{(i)})\\end{align}$$以上两行公式稍有不同，第一行比第二行多出一项，是因为权重衰减是作用于 $\\textstyle W$ 而不是$\\textstyle b$。 反向传播算法的思路如下：给定一个样例 $\\textstyle (x,y)$，我们首先进行“前向传导”运算，计算出网络中所有的激活值，包括 $\\textstyle h_{W,b}(x)$ 的输出值。之后，针对第 $\\textstyle l$ 层的每一个节点 $\\textstyle i$，我们计算出其“残差” $\\textstyle \\delta^{(l)}_i$，该残差表明了该节点对最终输出值的残差产生了多少影响。对于最终的输出节点，我们可以直接算出网络产生的激活值与实际值之间的差距，我们将这个差距定义为 $\\textstyle \\delta^{(n_l)}_i$ （第 $\\textstyle n_l$ 层表示输出层）。对于隐藏单元我们如何处理呢？我们将基于节点（第 $\\textstyle l+1$ 层节点）残差的加权平均值计算 $\\textstyle \\delta^{(l)}_i$，这些节点以 $\\textstyle a^{(l)}_i$ 作为输入。下面将给出反向传导算法的细节： 进行前馈传导计算，利用前向传导公式，得到 $\\textstyle L_2, L_3, \\ldots$ 直到输出层 $\\textstyle L_{n_l}$ 的激活值。 对于第 $n_l$（输出层）的每个输出单元$i$我们根据以下公式计算残差： 对 $\\textstyle l = n_l-1, n_l-2, n_l-3, \\ldots, 2$ 的各个层，第$\\textstyle l$层的第 $\\textstyle i$ 个节点的残差计算方法如下： $$\\delta_i^{(n_l)}=(\\overset{s_{l+1}}{\\underset{j=1}{\\sum}}W_{ji}^{(l)}\\delta_j^{(l+1)})f’(z_i^{(l)})$$ $$\\begin{align}\\delta^{(n_l-1)}_i &amp;=\\frac{\\partial}{\\partial z^{n_l-1}_i}J(W,b;x,y) = \\frac{\\partial}{\\partial z^{n_l-1}_i}\\frac{1}{2} \\left|y - h_{W,b}(x)\\right|^2 = \\frac{\\partial}{\\partial z^{n_l-1}_i}\\frac{1}{2} \\sum_{j=1}^{S_{n_l}}(y_j-a_j^{(n_l)})^2 \\\\&amp;= \\frac{1}{2} \\sum_{j=1}^{S_{n_l}}\\frac{\\partial}{\\partial z^{n_l-1}_i}(y_j-a_j^{(n_l)})^2 = \\frac{1}{2} \\sum_{j=1}^{S_{n_l}}\\frac{\\partial}{\\partial z^{n_l-1}_i}(y_j-f(z_j^{(n_l)}))^2 \\\\&amp;= \\sum_{j=1}^{S_{n_l}}-(y_j-f(z_j^{(n_l)})) \\cdot \\frac{\\partial}{\\partial z_i^{(n_l-1)}}f(z_j^{(n_l)}) = \\sum_{j=1}^{S_{n_l}}-(y_j-f(z_j^{(n_l)})) \\cdot f’(z_j^{(n_l)}) \\cdot \\frac{\\partial z_j^{(n_l)}}{\\partial z_i^{(n_l-1)}} \\\\&amp;= \\sum_{j=1}^{S_{n_l}} \\delta_j^{(n_l)} \\cdot \\frac{\\partial z_j^{(n_l)}}{\\partial z_i^{n_l-1}} = \\sum_{j=1}^{S_{n_l}} \\left(\\delta_j^{(n_l)} \\cdot \\frac{\\partial}{\\partial z_i^{n_l-1}}\\sum_{k=1}^{S_{n_l-1}}f(z_k^{n_l-1}) \\cdot W_{jk}^{n_l-1}\\right) \\\\&amp;= \\sum_{j=1}^{S_{n_l}} \\delta_j^{(n_l)} \\cdot W_{ji}^{n_l-1} \\cdot f’(z_i^{n_l-1}) = \\left(\\sum_{j=1}^{S_{n_l}}W_{ji}^{n_l-1}\\delta_j^{(n_l)}\\right)f’(z_i^{n_l-1})\\end{align}$$ 将上式中的$\\textstyle n_l-1$与$\\textstyle n_l$的关系替换为$\\textstyle l$与$\\textstyle l+1$的关系，就可以得到：$$\\delta^{(l)}_i = \\left( \\sum_{j=1}^{s_{l+1}} W^{(l)}_{ji} \\delta^{(l+1)}_j \\right) f’(z^{(l)}_i)$$以上逐次从后向前求导的过程即为“反向传导”的本意所在。 ​ 4.计算我们需要的偏导数，计算方法如下 ：$$\\begin{align}\\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W,b; x, y) &amp;= a^{(l)}_j \\delta_i^{(l+1)} \\\\\\frac{\\partial}{\\partial b_{i}^{(l)}} J(W,b; x, y) &amp;= \\delta_i^{(l+1)}.\\end{align}\\$$求$\\begin{align}\\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W)\\end{align}$?$$\\begin{align}\\frac{\\partial}{\\partial W_{ij}^{(l)}} J(W)&amp;=\\frac{\\partial }{\\partial Z_{ij}^{(l)}}J(W)=\\frac{\\partial J(W)}{\\partial Z_{i}^{(l+1)}}\\times\\frac{\\partial Z_{i}^{(l+1)}}{\\partial Z_{ij}^{(l)}} &amp;(问题拆解)\\Z_i^{(l+1)} &amp;= \\overset{n}{\\underset{i}{\\sum}}W_{ij}^{l}\\times a_j^{(l)}&amp;(神经元求和)\\\\frac{\\partial Z_{i}^{(l+1)}}{\\partial Z_{ij}^{(l)}}&amp;=\\frac{\\partial \\overset{n}{\\underset{i}{\\sum}}W_{ij}^{(l)}\\times a_j^{(l)}}{\\partial W_{ij}^{(l)}}=a_j^{(l)}&amp;(输出对权值的偏导数)\\\\delta_i^{l+1}&amp;=\\frac{\\partial J(W)}{\\partial Z_i^{(l+1)}}&amp;(神经元的错误变化率为)\\\\frac{\\partial}{\\partial W_i^{(l)}} J(W) &amp;= \\delta_i^{l+1}\\times a_j^{(l)}&amp;(最终)\\end{align}$$最后，我们用矩阵-向量表示法重写以上算法。我们使用“$\\textstyle \\bullet$” 表示向量乘积运算符（在Matlab或Octave里用“.*”表示，也称作阿达马乘积）。若$\\textstyle a = b \\bullet c$，则 $\\textstyle a_i = b_ic_i$。在上一个教程中我们扩展了 $\\textstyle f(\\cdot)$ 的定义，使其包含向量运算，这里我们也对偏导数 $\\textstyle f’(\\cdot)$ 也做了同样的处理（于是又有 $\\textstyle f’([z_1, z_2, z_3]) = [f’(z_1), f’(z_2), f’(z_3)]$ ）。 么，反向传播算法可表示为以下几个步骤： 进行前馈传导计算，利用前向传导公式，得到 $\\textstyle L_2, L_3, \\ldots$直到输出层 $\\textstyle L_{n_l}$ 的激活值。 对输出层（第 $n_l$层），计算： $$ \\begin{align}\\delta^{(n_l)}= - (y - a^{(n_l)}) \\bullet f’(z^{(n_l)})\\end{align} $$ 对于$ \\textstyle l = n_l-1, n_l-2, n_l-3, \\ldots, 2$的各层，计算： $$ \\begin{align}\\delta^{(l)} = \\left((W^{(l)})^T \\delta^{(l+1)}\\right) \\bullet f’(z^{(l)})\\end{align} $$ 计算最终需要的偏导数值： $$ \\begin{align}\\nabla_{W^{(l)}} J(W,b;x,y) &amp;= \\delta^{(l+1)} (a^{(l)})^T, \\\\\\nabla_{b^{(l)}} J(W,b;x,y) &amp;= \\delta^{(l+1)}.\\end{align} $$ 实现中应注意：在以上的第2步和第3步中，我们需要为每一个 $\\textstyle i$ 值计算其 $\\textstyle f’(z^{(l)}_i)$。假设 $\\textstyle f(z)$ 是sigmoid函数，并且我们已经在前向传导运算中得到了 $\\textstyle a^{(l)}_i$。那么，使用我们早先推导出的 !$\\textstyle f’(z)$表达式，就可以计算得到 $\\textstyle f’(z^{(l)}_i) = a^{(l)}_i (1- a^{(l)}_i)$。 最后，我们将对梯度下降算法做个全面总结。在下面的伪代码中，$\\textstyle \\Delta W^{(l)}$ 是一个与矩阵 $\\textstyle W^{(l)}$ 维度相同的矩阵，$\\textstyle \\Delta b^{(l)}$ 是一个与 $\\textstyle b^{(l)}$ 维度相同的向量。注意这里“$\\textstyle \\Delta W^{(l)}$”是一个矩阵，而不是“$\\textstyle \\Delta$ 与 $\\textstyle W^{(l)}$ 相乘”。下面，我们实现批量梯度下降法中的一次迭代： 对于所有 $\\textstyle l$，令 $\\textstyle \\Delta W^{(l)} := 0$ , $\\textstyle \\Delta b^{(l)} := 0$ （设置为全零矩阵或全零向量） 对于$i=1$到$m$ 使用反向传播算法计算 $\\textstyle \\nabla_{W^{(l)}} J(W,b;x,y)$ 和 $\\textstyle \\nabla_{b^{(l)}} J(W,b;x,y)$ 计算$\\textstyle \\Delta W^{(l)} := \\Delta W^{(l)} + \\nabla_{W^{(l)}} J(W,b;x,y)$ 计算 $\\textstyle \\Delta b^{(l)} := \\Delta b^{(l)} + \\nabla_{b^{(l)}} J(W,b;x,y)$ 更新权重参数 $\\begin{align}W^{(l)} &amp;= W^{(l)} - \\alpha \\left[ \\left(\\frac{1}{m} \\Delta W^{(l)} \\right) + \\lambda W^{(l)}\\right] \\\\b^{(l)} &amp;= b^{(l)} - \\alpha \\left[\\frac{1}{m} \\Delta b^{(l)}\\right]\\end{align}$ 现在，我们可以重复梯度下降法的迭代步骤来减小代价函数 $\\textstyle J(W,b)$ 的值，进而求解我们的神经网络。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"},{"name":"神经网络","slug":"神经网络","permalink":"http://uscair.club/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}],"author":{"name":"Gowi"}},{"title":"机器学习第一章【Introduction】","slug":"机器学习系列（一）——回归模型","date":"2020-02-09T17:33:36.400Z","updated":"2020-02-09T17:33:36.400Z","comments":true,"path":"2020/02/10/机器学习系列（一）——回归模型/","link":"","permalink":"http://uscair.club/2020/02/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"机器学习系列（一）——回归模型回归（Regression）模型是指机器学习方法学到的函数的输出是连续实数值，回归模型可以用于预测或者分类，这篇博客中主要整理用于预测的线性回归模型和多项式回归模型。 线性回归按照机器学习建模的三个步骤，首先需要确定选用的模型，这里就是线性回归（Linear regression）模型，然后将其形式化表达： 其中，x1,x2,⋯,xn是样本数据的n维属性描述，每一组w和b能确定一个不一样的h(x)，w和b的所有取值组合就构成了可选函数集合，我们的任务就是要从这个函数集合中选出“最好”的那个函数。对于训练数据集D描述如下： 其中)是样本的n维特征向量表示，y(i)∈R是样本标记。线性回归的目标是学得一个线性函数以尽可能准确的预测实值输出标记。因此我们需要确定一个衡量标准用以度量一个函数的好坏，也就是选择合适的损失函数（Loss Function）。根据线性回归的目标，我们只需要度量h(x)与y之间的差距，均方误差（Mean Square Error，MSE）是回归任务中最常用的损失函数。 因为hh是关于w,bw,b的函数，所以上式也可以写成能够让LL最小的w,bw,b所确定的函数就是我们要找的最好的那个函数，记为w∗,b∗ 现在需要选择一种优化算法从众多w,b中找出w∗,b∗w∗,b∗，常用的方法有梯度下降算法（Gradient Descent）和最小二乘法（Least Square Method，LSM）。 梯度下降法对多元函数的每一个变量分别求∂∂偏导数，并将结果写成向量形式，就是梯度。比如函数f(x,y)，分别对x,y求偏导数，(∂f/∂x,∂f/∂y)^T就是梯度。从几何意义上讲，梯度是函数在该点变化最快的方向，因此沿着梯度的反方向，会更加容易找到函数的最小值点。下图是梯度下降的一个直观解释 比如我们在一座大山的某个位置想要到达山脚下，由于我们不知道怎么下山，于是决定走一步算一步，每次走到一个位置后，求解当前位置的梯度，沿着梯度的负方向，也就是当前最陡峭的方向向下走，直到走到梯度为零的位置。当然这样走下去，有可能不能走到山脚，而是到了某一个局部山峰低处。因此梯度下降不一定能够找到全局最优解，有可能是一个局部最优解，如果损失函数是凸函数，梯度下降算法就一定能找到全局最优解。梯度下降算法步骤如下： 随机选取一个初始值w^0计算，其中ηη是学习速率，决定了每一次调整的步长 迭代第二步多次直至梯度为零，或者损失达到允许范围，或者达到迭代次数。 最小二乘法同样可以采用最小二乘法来对w,b进行估计，最小二乘法直接求解得到解析解。为了方便讨论，我们把w,b合并组成一个向量)，同时给每一个样本增加一个恒定属性值1。同时，把数据集D表示成一个m∗(n+1)m∗(n+1)大小的矩阵X再把标记也写成向量形式y=(y1;y2;⋯;ym)，则类似的有损失函数对w^求导得到令上式等于零，可得w^w^最优解的闭式解其中，(X^TX)−1是(X^TX)的逆矩阵，可能存在(X^TX)不是满秩矩阵，常见的作法是引入正则化（regularization）项。 多项式回归有些样本数据用线性回归拟合时可能不是特别恰当，这时候可以尝试采用多项式回归，如下图所示，是一个房屋价格与房屋面积的样本数据集，可以明显发现所有数据点并不分布在某一条直线附近，这时候可以考虑尝试二次函数或者三次函数 对于多项式回归，可以将x^2,x^3也看作是一个新的属性，这时多项式回归就和线性回归一样了，因此多项式回归的训练方法依旧和线性回归一样。需要注意的是，能够选择简单的线性模型时就不要选择相对复杂的多项式模型。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Wonder"}},{"title":"Nao  机器人入门","slug":"NAO机器人（python语言）","date":"2020-02-09T11:28:56.705Z","updated":"2020-02-09T11:28:56.705Z","comments":true,"path":"2020/02/09/NAO机器人（python语言）/","link":"","permalink":"http://uscair.club/2020/02/09/NAO%E6%9C%BA%E5%99%A8%E4%BA%BA%EF%BC%88python%E8%AF%AD%E8%A8%80%EF%BC%89/","excerpt":"","text":"NAO机器人（python语言） 是一种双足人形机器人，58公分高，可以做出各种与人类一样的 肢体语言，通过代码实现了识别语言并根据代码做出相应的回应，能够通过感应器识别物体，与人类互动，NAO提供了一个独立的编程环境（Choregraphe），需要密匙才能激活对应 机器人环境（到时候会帮助你们建立起来）。 NAO机器人是人工智能机器人，嵌入式软件使得NAO可以声音合成，图像识别，行为控制，双通道超声波探测障碍物，以及自身二极管进行视觉效果。 在C++、Python、Choregraphe中，我们是通过编译代码实现对机器人控制实现，多看NAOqi API ,在那之前我们了解一下NAO机器人的基本情况： 1.NAO能够探测前方0.25-2.55m内是否有障碍物，探测角度60°。 2.触摸、按压、划过接触传感器可以出发接触传感器产生电信号，进而完成向机器人输入信息.头部：前中后三个触摸传感器。手部触摸传感器，脚前部的碰撞传感器（也起到缓冲作用）。胸前：长按、短按、连按。开机：按胸前按钮。报IP地址：在开机并且联网状态下，按胸前按钮。关机：在开机状态下，按胸前按钮。自主生活状态：连续按两次胸前按钮进入或退出。 3.测量身体状态以及加速度，包括2个陀螺仪，1个加速度计。4.（MRE磁性编码器）：测量机器人自身关节位置，36个。5.每只脚上有4个压力传感器，用来确定每只脚重心的位置。在行走过程中，NAO根据重心为在进行不太调整以保持身体平衡。6.头部传感器周围：12个LED耳部：2的10次方个16级蓝色LED, 2的8次方个全彩色LED, 胸前按钮和双足各有1个RGB全彩色LED。 使用的坐标系：笛卡尔坐标系，X轴指向身体前方，Y为由右向左方向，Z轴为垂直向上方向。 沿Z轴方向的旋转称为偏转(Yam), 沿Y轴的旋转称为俯仰（Pitch)，沿X轴方向的旋转称为横滚（Roll）。 关节运动范围:头部两个自由度分别控制Nao脑袋的扭转，其中控制头部关节在Z轴扭转的范围为-120°到120°，在Y轴前后运动的范围为-39°到39°；左右手臂各有5个自由度且呈对称分布，肩关节控制Y轴前后运动的范围为-120°到120°，控制Z轴左右运动的范围为0°到95°，肩关节控制在X轴扭转的范围为-90°到0°，肘关节控制在Z轴运动的范围为-120°到120°，腕关节控制在X轴扭转的范围为-105°到105°；Nao的左右手上各有一个自由度，其控制Nao的手部的打开或合拢；Nao左右腿的关节除髋关节和踝关节外其余均呈对称分布的，左髋关节控制腿部在Y轴前后运动的范围为-104.5°到28.5°，左髋关节控制腿部在X轴左右运动的范围为-25°到45°，左踝关节控制在Y轴前后运动的范围为-70.5°到54°，左控制X轴左右运动的范围为-45°到25°，右髋关节控制腿部在Y轴前后运动的范围为-104.5°到28.5°，右髋关节控制腿部在X轴左右运动的范围为-45°到25°，右踝关节控制在Y轴前后运动的范围为-70.5°到54°，右踝关节控制X轴左右运动的范围为-25°到45°；膝关节控制腿部在Y轴运动的范围为-5°到125°；髋部存在一个控制其髋部在Y轴运动的自由度，其运动范围为-65.62°到42.44°。 自由度： 机器人能够独立运动的关节数目称为机器人的运动自由度。头部有两个关节，可以做偏转(Yam)和俯仰（pitch），因此，头部的自由度为2.全身共有26个自由度。 转矩是一种力矩，力矩=力力臂 （N m)堵转转矩和标称转矩反应了电机在启动和政策工作状态下驱动力的大小。堵转转矩是指当电机转速为0时的转矩，如膝关节电机在启动或维持半蹲状态都处于堵转状态。额定转矩是电机可以长期稳定运行的转矩。 主要方法：学习NAOqi API goToPosture(postureName, speed):转到预定义姿势。阻塞调用。getPosture():返回当前姿势名称，如果当前姿势不是预定义姿势，返回unknow。阻塞调用。getPostureList():返回预定义姿势列表。阻塞调用。applayPosture(postureName, speed)：将机器人关节设置为预定义姿势对应的状态（没有中间动作）。阻塞调用。stopMove():停止当前动作。 Nao行走控制主要的三种方式moveTo:使机器人移动到指定位置，阻塞调用。(1).moveTo(x, y, theta), 移动到指定位置。(2)moveTo(x, y, theta, MoveConfig), 按给定的步态参数移动到指定位置。moveConfig为自定义步态参数列表，列表中的内容为步态参数键值对。(3)moveTo(controlPoints)，沿控制点移动到指定位置，controlPoints为控制点列表。(4)moveTo(controlPoints, moveConfig), movetoConfig为自定义步态参数列表。 move:move方法是机器人按指定速度行走,非阻塞调用。 (1)move(x, y, theta), 按指定速度行走，x为绕X方向速度（m/s), theta为绕Z轴旋转角速度(rad/s), 负数表示顺时针转动。非阻塞调用方法，需要time.sleep()延时，延时时间除了行走过程时间外，应还包括机器人走过程的初始化阶段和终止阶段。(2)move(x, y, theata, moveConfig), 按给定的步态参数和指定速度行走。其中x为X方向，moveConfig为自定义步态参数列表可以分别设置左脚和右脚的步态参数。 moveToward:moveToward()方法是机器人按指定速度行走，非阻塞调用方法。(1)moveToward(x, y, theta), 按指定速度行走，其中x为X方向速度，取值范围[-1, 1], theta为绕Z轴旋转速度。(2)moveToward(x, y, moveConfig), 按给定的步态参数、指定速度行走。","categories":[{"name":"NAO","slug":"NAO","permalink":"http://uscair.club/categories/NAO/"}],"tags":[{"name":"NAOqi","slug":"NAOqi","permalink":"http://uscair.club/tags/NAOqi/"}],"author":{"name":"HL"}},{"title":"STM32单片机系列(一)","slug":"STM32-CubMx","date":"2020-02-08T16:00:00.000Z","updated":"2020-02-08T16:00:00.000Z","comments":true,"path":"2020/02/09/STM32-CubMx/","link":"","permalink":"http://uscair.club/2020/02/09/STM32-CubMx/","excerpt":"","text":"介绍STM32CubeMX是一个图形化的工具，也是配置和初始化C代码生成器（STM32 configuration and initialization C code generation），也就是自动生成开发初期关于芯片相关的一些初始化代码。它包含了STM32所有系列的芯片，包含示例和样本（Examples and demos）、中间组件（Middleware Components）、硬件抽象层（Hardwaree abstraction layer）。CubMX对一些开发工程的基本配置提供了很大的帮助，大大减少了编写基础代码所耗费的时间以及精力。内容今天就以点亮LED灯为例通过CubMX来编写相关程序。首先选择对应的芯片类型这里以STM32F407IE为例：其次可以通过对应芯片的用户手册来确定对应的IO口：407对应的是F9,F10俩个IO口（任选其一即可）。)然后就是最重要的时钟配置，时钟是心脏是重中之重。设置了对应时钟源之后可以看到对应的IO口也有所改变 F407 LED的IO挂载在了APB1时钟线上，配置对应的时钟频率 其次就是代码生成的一些配置：选择工程的名字，以及生成的工程文件的类型，这我这里由于我选择的是Keil5所以我选择了MDK-ARM V5然后记得勾选生成外设源文件和头文件的选项最后点击生成代码","categories":[{"name":"单片机","slug":"单片机","permalink":"http://uscair.club/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://uscair.club/tags/STM32/"}],"author":{"name":"Page"}},{"title":"卷积神经网络（一）","slug":"卷积神经网络（一）","date":"2020-02-08T16:00:00.000Z","updated":"2020-02-08T16:00:00.000Z","comments":true,"path":"2020/02/09/卷积神经网络（一）/","link":"","permalink":"http://uscair.club/2020/02/09/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"一.概念局部感受野（Local Receptive Fields）卷积神经网络则是把每一个隐藏节点只连接到图像的某个局部区域，从而减少参数训练的数量。例如，一张1024×720的图像，使用9×9的感受野，则只需要81个权值参数。对于一般的视觉也是如此，当观看一张图像时，更多的时候关注的是局部。 共享权值(Shared Weights）卷积神经网络卷积层中，神经元对应的权值是相同，共享的权值和偏置也被称作卷积核或滤汲器。 池化（Pooling)通过对图像卷积进行压缩，卷积之后，通过一个下采样过程，来调整图像大小。Lp池化 监督学习根据已有的数据集，知道输入和输出结果之间的关系。根据这种已知的关系，训练得到一个最优的模型。也就是说，在监督学习中训练数据既有特征(feature)又有标签(label)，通过训练，让机器可以自己找到特征和标签之间的联系，在面对只有特征没有标签的数据时，可以判断出标签。 非监督学习我们不知道数据集中数据、特征之间的关系，而是要根据聚类或一定的模型得到数据之间的关系。 二.结构输入层一维卷积神经网络的输入层接收一维或二维数组，其中一维数组通常为时间或频谱采样；二维数组可能包含多个通道；二维卷积神经网络的输入层接收二维或三维数组；三维卷积神经网络的输入层接收四维数组 隐含层由卷积层、池化层和全连接层组成 卷积层~内部包含多个卷积核，功能是对输入数据进行特征提取.上图中间则为卷积核，以下为卷积公式。 池化层在卷积层进行特征提取后，输出的特征图会被传递至池化层进行特征选择和信息过滤。池化层包含预设定的池化函数，其功能是将特征图中单个点的结果替换为其相邻区域的特征图统计量。池化层选取池化区域与卷积核扫描特征图步骤相同，由池化大小、步长和填充控制 。 全连接层~ 卷积神经网络中的全连接层等价于传统前馈神经网络中的隐含层。全连接层位于卷积神经网络隐含层的最后部分，并只向其它全连接层传递信号。特征图在全连接层中会失去空间拓扑结构，被展开为向量并通过激励函数 。按表征学习观点，卷积神经网络中的卷积层和池化层能够对输入数据进行特征提取，全连接层的作用则是对提取的特征进行非线性组合以得到输出，即全连接层本身不被期望具有特征提取能力，而是试图利用现有的高阶特征完成学习目标。在一些卷积神经网络中，全连接层的功能可由全局均值池化（global average pooling）取代 ，全局均值池化会将特征图每个通道的所有值取平均，即若有7×7×256的特征图，全局均值池化将返回一个256的向量，其中每个元素都是7×7，步长为7，无填充的均值池化 。 输出层卷积神经网络中输出层的上游通常是全连接层，因此其结构和工作原理与传统前馈神经网络中的输出层相同。对于图像分类问题，输出层使用逻辑函数或归一化指数函数输出分类标签。在物体识别问题中，输出层可设计为输出物体的中心坐标、大小和分类 。在图像语义分割中，输出层直接输出每个像素的分类结果。","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"CNN","slug":"CNN","permalink":"http://uscair.club/tags/CNN/"}],"author":{"name":"ffffff"}},{"title":"线性回归的几种解法","slug":"机器学习-线性回归","date":"2020-02-08T16:00:00.000Z","updated":"2020-02-08T16:00:00.000Z","comments":true,"path":"2020/02/09/机器学习-线性回归/","link":"","permalink":"http://uscair.club/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","excerpt":"线性回归的几种简单解法总结","text":"线性回归的几种简单解法总结 最小二乘 和 正规方程假设线性回归方程为 $Y = W_0+W_1X1+W_2X_2+….$ 则最小二乘的条件是 $S =\\sum_1^n(y_i-(w_0+w_1x_{1i}+…))^2 = min$ 且 $$\\frac{\\sigma S}{\\sigma x_i} = 0$$ 令$X=\\begin{bmatrix}1&amp;x_1^1&amp;\\cdots&amp;x_n^1\\1&amp;x_1^2&amp;\\cdots&amp;x_n^2\\\\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\1&amp;x_1^n&amp;\\cdots&amp;x_n^n\\\\end{bmatrix}$ $Y =\\begin{bmatrix}y_1\\y_2\\\\vdots\\y_n\\end{bmatrix}$ $W=[W_0,W_1,W_2,W_3 ,….]$ 则 $Y=XW^T$ $\\sum_1^n(y_i-(w_0+w_1x_{1i}+…))^2$ $=(XW^T-Y)^T(XW^T-Y)$ $=(WX^T-Y^T)(XW^T-Y)$ $=WX^TXW^T-Y^TXW^T-WX^TY+Y^TY$ 对W求导，可得 $2WX^TX-2Y^TX=0$ $W=(Y^TX)(X^TX)^{-1}$ $W^T=(XX^T)^{-1}X^TY$ 123456# 1 正规方程解法# W = (XTX)-1XTYdef Fun(X, Y): XTY = np.dot(X.T, Y) XTX = np.dot(X.T, X) return np.dot(np.linalg.inv(XTX), XTY) 梯度下降假设函数 $h(X)=w_0+w_1x_1+ …$ 代价函数 $J(W)=\\frac{1}{2n}\\sum_1^n(h(x^i)-y_i)^2$ 梯度下降算法 $w_i=w_i-\\alpha \\frac{J(W)}{\\alpha w_i}$ 其中$\\alpha$为学习率 即为 $w_i = w_i - \\alpha \\frac{1}{n}(h(x^i)-y_i)x_i$ 样例如下: 12345678910111213141516171819202122232425import numpy as np# 数据生成num = 8num_examples = 1000 # 样例数# 真实参数 f(x1,x2,x2,x4) = w0+w1x3+w2x3+w3x3+w4x4true_w = np.random.randint(-10000, 10000, num)X = np.random.randint(-10000, 10000, (num_examples, num))X[:, 0] = 1# Y= XWY = np.dot(X, true_w)# 预置a = 0.000000001W = np.zeros(num)def BP(X, Y): for i in range(X.shape[0]): h = np.dot(X[i], W) for j in range(W.shape[0]): W[j] = W[j] - a *(h-Y[i]) * X[i][j] /num_examplesfor i in range(1000): BP(X,Y)print(\"原: \",true_w )print(\"解: \", W)","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"线性回归","slug":"线性回归","permalink":"http://uscair.club/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"}],"author":{"name":"RE9T"}},{"title":"Robocup新手指南","slug":"Robocup新手指南","date":"2020-02-07T16:00:00.000Z","updated":"2020-02-07T16:00:00.000Z","comments":true,"path":"2020/02/08/Robocup新手指南/","link":"","permalink":"http://uscair.club/2020/02/08/Robocup%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/","excerpt":"","text":"初学者该从哪些方面了解1.robocup比赛过程以及相关规则 2.什么是robocup robocup简介RoboCup (Robot World Cup)，即机器人世界杯足球锦标赛。它是国际上一项为提高相关领域的教育和研究水平而举行的大型比赛和学术活动,通过提供一个标准任务来促进分布式人工智能、智能机器人技术、及其相关领域的研究与发展。 server能在server上工作是建立在对SPADES上的，所以接下来主要介绍一下SPADES相关的两点主要内容，即Agent可接收的感觉和动作 感觉感觉信息格式：Stime time data其中第一个time指的是感觉发出的周期，其二个time指的是信息到达agent的周期，data指感觉信息的字符串，值得注意的是一条感觉信息可以包含多种感觉。1.视觉：全方向，所感观物体是透明的，物体位置以相对于agent的极坐标形式给出，坐标参数为（距离，theta，phi）2.competition state即比赛状态：主要提供信息，例如球门球员尺寸,物体质量，时间以及比赛模式，球员号码，球员是左还是右的位置3.agent状态：主要提供自身内部信息，即电池状态和温度4.听觉：可通过听说来相互通讯 动作与感觉一样，通过一些动作来实现agent对环境的作用。每种动作信息以字母”A”开头，后面是字符串。格式：Adatadata包含动作信息Creat：这是agent必须发送的第一个动作。这个动作使得server登录agent并创建与agent的通讯。格式如下： A(create) 类似的还有Init，Beam，Drive，Kick，Catch，Say等，具体内容可点击下方链接查看。 关于3D的具体内容指导","categories":[{"name":"人工智能","slug":"人工智能","permalink":"http://uscair.club/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}],"tags":[{"name":"robocup","slug":"robocup","permalink":"http://uscair.club/tags/robocup/"}],"author":{"name":"徐雯君"}},{"title":"数字图像处理——拉普拉斯算子【像素级别处理】（python）","slug":"数字图像处理——拉普拉斯算子【像素级别处理】（python）","date":"2020-02-06T12:34:46.135Z","updated":"2020-02-06T12:34:46.135Z","comments":true,"path":"2020/02/06/数字图像处理——拉普拉斯算子【像素级别处理】（python）/","link":"","permalink":"http://uscair.club/2020/02/06/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%AE%97%E5%AD%90%E3%80%90%E5%83%8F%E7%B4%A0%E7%BA%A7%E5%88%AB%E5%A4%84%E7%90%86%E3%80%91%EF%BC%88python%EF%BC%89/","excerpt":"","text":"简介：==拉普拉斯算子是一种微分算子常在图像处理中强调灰度值的突变，不强调灰度变换缓慢的地方，得到的图层与原图像叠加在一起可以得到锐化的效果== 一个二维图像的拉普拉斯算子可以定义为$$\\nabla^{2}f=\\frac{\\partial^2 f}{\\partial x^2}+\\frac{\\partial^2 f}{\\partial y^2}$$ 所以:在X方向上存在$$\\frac{\\partial^2 f}{\\partial x}=f(x+1,y)+f(x-1,y)-2f(x,y)$$ 在Y方向上存在$$\\frac{\\partial^2 f}{\\partial y}=f(x,y+1)+f(x,y-1)-2f(x,y)$$ 可得：$$\\nabla^2f=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y)$$ 扩展至对角线：$$\\nabla^2f=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)+f(x-1,y-1)+f(x-1,y+1)+f(x+1,y-1)+f(x+1,y+1)-8f(x,y)$$ 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186import cv2import numpy as npimport matplotlib.pyplot as pltimg = cv2.imread('Fig0338.tif') # 测试图片H = img.shape[0]W = img.shape[1]pixa = np.zeros((H, W), np.int32)mImgae = np.zeros((H, W, 3), np.uint8) # 标定(scale)前的滤波图像smImga = np.zeros((H, W, 3), np.uint8) # 标定(scale)后的滤波图像pixb = np.zeros((H, W), np.int32)mImgbe = np.zeros((H, W, 3), np.uint8) # 标定前的滤波图像smImgb = np.zeros((H, W, 3), np.uint8) # 标定后的滤波图像imga = np.zeros((H, W, 3), np.uint8) # xy方向模板滤波后图像imgb = np.zeros((H, W, 3), np.uint8) # 加上对角方向模板滤波后图像# a用到的算子是 b用到的算子是# 0 1 0 1 1 1# 1 -4 1 1 -8 1# 0 1 0 1 1 1# 先绘制标定滤波图像# 标定指的是最小值设置为0，最大值设置为255的进行归一化的结果for i in range(1, H - 1): for j in range(1, W - 1): pixa[i, j] = int(img[i - 1, j, 0]) + img[i + 1, j, 0] + img[i, j - 1, 0] + img[i, j + 1, 0] - 4 * int( img[i, j, 0]) pixb[i, j] = int(img[i - 1, j - 1, 0]) + img[i - 1, j, 0] + img[i - 1, j + 1, 0] + img[i, j - 1, 0] + img[ i, j + 1, 0] + img[i + 1, j - 1, 0] + img[i + 1, j, 0] + img[i + 1, j + 1, 0] - 8 * int(img[i, j, 0])maxa = 0maxb = 0mina = 255minb = 255for i in range(H): for j in range(W): # 求出像素最大值和最小值，以利于scale if pixa[i, j] &gt; maxa: maxa = pixa[i, j] if pixa[i, j] &lt; mina: mina = pixa[i, j] if pixb[i, j] &gt; maxb: maxb = pixb[i, j] if pixb[i, j] &lt; minb: minb = pixb[i, j] if pixa[i, j] &lt; 0: mImgae[i, j] = [0, 0, 0] else: mImgae[i, j, 0] = pixa[i, j] mImgae[i, j, 1] = pixa[i, j] mImgae[i, j, 2] = pixa[i, j] if pixb[i, j] &lt; 0: mImgbe[i, j] = [0, 0, 0] else: mImgbe[i, j, 0] = pixb[i, j] mImgbe[i, j, 1] = pixb[i, j] mImgbe[i, j, 2] = pixb[i, j]ka = 0kb = 0if maxa &gt; mina: ka = 255 / (maxa - mina)if maxb &gt; minb: kb = 255 / (maxb - minb)# scale处理for i in range(H): for j in range(W): smImga[i, j, 0] = (pixa[i, j] - mina) * ka smImga[i, j, 1] = smImga[i, j, 0] smImga[i, j, 2] = smImga[i, j, 0] smImgb[i, j, 0] = (pixb[i, j] - minb) * kb smImgb[i, j, 1] = smImgb[i, j, 0] smImgb[i, j, 2] = smImgb[i, j, 0]# 加上拉普拉斯算子# pixa和pixb里面就是两个算子的结果# lapa和lapb是原图加算子的结果，用来裁剪或者scale的原始数据lapa = np.zeros((H, W), np.int32)lapb = np.zeros((H, W), np.int32)# 缩放处理# maxa = 0# maxb = 0# mina = 255# minb = 255for i in range(H): for j in range(W): lapa[i, j] = img[i, j, 0] - pixa[i, j] lapb[i, j] = img[i, j, 0] - pixb[i, j] # 裁剪处理 if lapa[i, j] &gt; 255: lapa[i, j] = 255 if lapa[i, j] &lt; 0: lapa[i, j] = 0 if lapb[i, j] &gt; 255: lapb[i, j] = 255 if lapb[i, j] &lt; 0: lapb[i, j] = 0 # 缩放处理 # if lapa[i, j] &gt; maxa: # maxa = lapa[i, j] # if lapa[i, j] &lt; mina: # mina = lapa[i, j] # if lapb[i, j] &gt; maxb: # maxb = lapb[i, j] # if lapb[i, j] &lt; minb: # minb = lapb[i, j]# 缩放处理# ka = 0# kb = 0# if maxa &gt; mina:# ka = 255 / maxa# if maxb &gt; minb:# kb = 255 / maxb# scale处理for i in range(H): for j in range(W): # 裁剪处理 imga[i, j, 0] = lapa[i, j] imga[i, j, 1] = lapa[i, j] imga[i, j, 2] = lapa[i, j] imgb[i, j, 0] = lapb[i, j] imgb[i, j, 1] = lapb[i, j] imgb[i, j, 2] = lapb[i, j] # 缩放处理 # if lapa[i, j] &gt; 0: # imga[i, j, 0] = lapa[i, j] * ka # else: # imga[i, j, 0] = 0 # imga[i, j, 1] = imga[i, j, 0] # imga[i, j, 2] = imga[i, j, 0] # if lapb[i, j] &gt; 0: # imgb[i, j, 0] = lapb[i, j] * kb # else: # imgb[i, j, 0] = 0 # imgb[i, j, 1] = imgb[i, j, 0] # imgb[i, j, 2] = imgb[i, j, 0]# 原图plt.subplot(1, 4, 1)plt.axis('off')plt.title('Original image')plt.imshow(img)# 图3.37a的模板plt.subplot(2, 4, 2)plt.axis('off')plt.title('Before sale a')plt.imshow(mImgae)# scale后图3.37a的模板plt.subplot(2, 4, 3)plt.axis('off')plt.title('After sale a')plt.imshow(smImga)# 图3.37a的模板锐化后的图像plt.subplot(2, 4, 4)plt.axis('off')plt.title('Sharpened Image a')plt.imshow(imga)# 图3.37b的模板plt.subplot(2, 4, 6)plt.axis('off')plt.title('Before sale b')plt.imshow(mImgbe)# scale后图3.37b的模板plt.subplot(2, 4, 7)plt.axis('off')plt.title('After sale b')plt.imshow(smImgb)# 图3.37b的模板锐化后的图像plt.subplot(2, 4, 8)plt.axis('off')plt.title('Sharpened Image b')plt.imshow(imgb)plt.show()","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"拉普拉斯","slug":"拉普拉斯","permalink":"http://uscair.club/tags/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF/"}],"author":{"name":"Gowi"}},{"title":"吴恩达机器学习第三章【Linear Algebra Revie】（线性代数回顾）","slug":"吴恩达机器学习第三章【Linear Algebra Revie】","date":"2020-02-06T04:58:30.386Z","updated":"2020-02-06T04:58:30.386Z","comments":true,"path":"2020/02/06/吴恩达机器学习第三章【Linear Algebra Revie】/","link":"","permalink":"http://uscair.club/2020/02/06/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%90Linear%20Algebra%20Revie%E3%80%91/","excerpt":"","text":"Matrices and Vectors【矩阵和向量】在$\\begin{bmatrix}{1402}&amp;{191}\\\\{1371}&amp;{821}\\\\{949}&amp;{1437}\\\\{147}&amp;{1448}\\end{bmatrix}$中，这是一个这个是4×2矩阵，即4行2列，如$m$为行，$n$为列，那么$m×n$即4×2，其中$A_{ij}$指第$i$行，第$j$列的元素。 向量是一种特殊的矩阵，向量一般都是列向量，如：$y=\\left[ \\begin{matrix} {460} \\ {232} \\ {315} \\ {178} \\\\\\end{matrix} \\right]$为四维列向量（4×1）。 Addition and Scalar Multiplication【加法和标量乘法】矩阵的加法：行列数相等的各元素相加。 $\\begin{bmatrix}{1}&amp;{0}\\\\{2}&amp;{5}\\\\{3}&amp;{1}\\end{bmatrix}+\\begin{bmatrix}{4}&amp;{0.5}\\\\{2}&amp;{5}\\\\{0}&amp;{1}\\end{bmatrix}=\\begin{bmatrix}{5}&amp;{0.5}\\\\{4}&amp;{10}\\\\{3}&amp;{2}\\end{bmatrix}$ 矩阵的数乘：每个元素都要乘。 $3\\times\\begin{bmatrix}{1}&amp;{0}\\\\{2}&amp;{5}\\\\{3}&amp;{1}\\end{bmatrix}=\\begin{bmatrix}{3}&amp;{0}\\\\{6}&amp;{15}\\\\{9}&amp;{3}\\end{bmatrix}=\\begin{bmatrix}{1}&amp;{0}\\\\{2}&amp;{5}\\\\{3}&amp;{1}\\end{bmatrix}\\times3$ Matrix Vector Multiplication【矩阵向量乘法】 Matrix Matrix Multiplication【矩阵乘法】矩阵乘法： $m×n$矩阵乘以$n×o$矩阵，变成$m×o$矩阵。 在单变量线性回归中的应用 Matrix Multiplication Properties【矩阵乘法的性质】矩阵乘法的性质： 矩阵的乘法不满足交换律：$A×B≠B×A$ 矩阵的乘法满足结合律。即：$A×(B×C)=(A×B)×C$ 单位矩阵：在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的1,我们称这种矩阵为单位矩阵．它是个方阵，一般用 $I$ 或者 $E$ 表示,从左上角到右下角的对角线（称为主对角线）上的元素均为1以外全都为0 $A{{A}^{-1}}={{A}^{-1}}A=I$ 对于单位矩阵，有$AI=IA=A$ Inverse and Transpose【逆、转置】矩阵的逆：如矩阵$A$是一个$m×m$矩阵（方阵），如果有逆矩阵，则：$A{{A}^{-1}}={{A}^{-1}}A=I$ 矩阵的转置：设$A$为$m×n$阶矩阵（即$m$行$n$列），第$i $行$j $列的元素是$a(i,j)$，即：$A=a(i,j)$ 定义$A$的转置为这样一个$n×m$阶矩阵$B$，满足$B=a(j,i)$，即 $b (i,j)=a(j,i)$（$B$的第$i$行第$j$列元素是$A$的第$j$行第$i$列元素），记${{A}^{T}}=B$。(有些书记为A’=B） ${{\\begin{bmatrix} a& b \\\\ c& d \\\\ e& f \\\\\\end{bmatrix} }^{T}}=\\begin{bmatrix} a&amp; c &amp; e \\ b&amp; d &amp; f \\\\\\end{bmatrix}$ 矩阵的转置基本性质: $ {{\\left( A\\pm B \\right)}^{T}}={{A}^{T}}\\pm {{B}^{T}} $${{\\left( A\\times B \\right)}^{T}}={{B}^{T}}\\times {{A}^{T}}$${{\\left( {{A}^{T}} \\right)}^{T}}=A $${{\\left( KA \\right)}^{T}}=K{{A}^{T}} $","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"},{"name":"数理基础","slug":"数理基础","permalink":"http://uscair.club/tags/%E6%95%B0%E7%90%86%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Gowi"}},{"title":"吴恩达机器学习第二章【Linear Regression with One Variable】（单变量线性回归）","slug":"Linear Regression with One Variable","date":"2020-02-06T04:58:25.879Z","updated":"2020-02-06T04:58:25.879Z","comments":true,"path":"2020/02/06/Linear Regression with One Variable/","link":"","permalink":"http://uscair.club/2020/02/06/Linear%20Regression%20with%20One%20Variable/","excerpt":"","text":"##Model Representation【模型表示】 在一个房价预测中，我们根据房屋大小的面积来估计房价，诺房屋面积与价格满足以下关系 由图可知为监督学习，诺一种可能的表达方式为：$h_\\theta \\left( x \\right)=\\theta_{0} + \\theta_{1}x$，因为只含有一个特征/输入变量，因此这样的问题叫作单变量线性回归(Linear Regression with One Variable)问题。 图为用单变量线性回归模型来预测面积为1250的房价 我们将要用来描述这个回归问题的标记如下: $m$ 代表训练集中实例的数量 $x$ 代表特征/输入变量 $y$ 代表目标变量/输出变量 $\\left( x,y \\right)$ 代表训练集中的实例 $({{x}^{(i)}},{{y}^{(i)}})$ 代表第$i$ 个观察实例 $h$ 代表学习算法的解决方案或函数也称为假设（hypothesis） Cost Function【代价函数】我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距（下图中蓝线所指）就是建模误差（modeling error）。 在单变量线性回归中，即使得代价函数(Cost Function) $J \\left( \\theta_0, \\theta_1 \\right) = \\frac{1}{2m}\\sum\\limits_{i=1}^m \\left( h_{\\theta}(x^{(i)})-y^{(i)} \\right)^{2}$最小。 Cost Function - Intuition I【代价函数的直观理解I】 在单变量线性回归中，存在点$(1,1),(2,2),(3,3)$，在$\\theta_0=0$的情况下，表达式为$h(x)=\\theta_1x$来估计 $\\theta_1=1$时： $\\theta_1=\\frac{1}{2}$时： $\\theta_1=0$时： 描绘$J(\\theta_1)-\\theta_1$图得： Cost Function - Intuition II【代价函数的直观理解II】在$J \\left( \\theta_0, \\theta_1 \\right)$、$\\theta_0$与$\\theta_1$的三维图中 可知存在使得$J(\\theta_0,\\theta_1)$最小的$\\theta_0和\\theta_1$ 利用等高图表示 Gradient Descent【梯度下降】梯度下降(Gradient Descent)背后的思想是：开始时我们随机选择一个参数的组合$\\left( {\\theta_{0}},{\\theta_{1}},……,{\\theta_{n}} \\right)$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到找到一个局部最小值（local minimum），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（global minimum），选择不同的初始参数组合，可能会找到不同的局部最小值。 即$Min\\sum_{\\theta_1、\\theta_2、\\theta_3···\\theta_n}J(\\theta_1,\\theta_2,\\theta_3···\\theta_n)$ 批量梯度下降（batch gradient descent）算法的公式为： 其中$a$是学习率（learning rate），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大在批量梯度下降中，我们每一次都同时让所有的参数减去学习速率乘以代价函数的导数。其中:=相当于计算机中的赋值号。 Gradient Descent Intuition【梯度下降的直观理解】梯度下降算法如下： ${\\theta_{j}}:={\\theta_{j}}-\\alpha \\frac{\\partial }{\\partial {\\theta_{j}}}J\\left(\\theta \\right)$ 描述：对$\\theta $赋值，使得$J\\left( \\theta \\right)$按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中$a$是学习率（learning rate），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大 其中$\\frac{\\partial }{\\partial {\\theta_{j}}}J\\left(\\theta \\right)$表示切线的斜率 让我们来看看如果$a$太小或$a$太大会出现什么情况： 如果$a$太小了，即我的学习速率太小，结果就是只能这样像小宝宝一样一点点地挪动，去努力接近最低点，这样就需要很多步才能到达最低点，所以如果$a$太小的话，可能会很慢，因为它会一点点挪动，它会需要很多步才能到达全局最低点。 如图： 如果$a$太大，那么梯度下降法可能会越过最低点，甚至可能无法收敛，下一次迭代又移动了一大步，越过一次，又越过一次，一次次越过最低点，直到你发现实际上离最低点越来越远，所以，如果$a$太大，它会导致无法收敛，甚至发散。 如图： 假设你将${\\theta_{1}}$初始化在局部最低点，在这儿，它已经在一个局部的最优处或局部最低点。结果是局部最优点的导数将等于零，因为它是那条切线的斜率。这意味着你已经在局部最优点，它使得${\\theta_{1}}$不再改变，也就是新的${\\theta_{1}}$等于原来的${\\theta_{1}}$，因此，如果你的参数已经处于局部最低点，那么梯度下降法更新其实什么都没做，它不会改变参数的值。这也解释了为什么即使学习速率$a$保持不变时，梯度下降也可以收敛到局部最低点。 首先初始化我的梯度下降算法，在那个品红色的点初始化，如果我更新一步梯度下降，也许它会带我到这个点，因为这个点的导数是相当陡的。现在，在这个绿色的点，如果我再更新一步，你会发现我的导数，也即斜率，是没那么陡的。随着我接近最低点，我的导数越来越接近零，所以，梯度下降一步后，新的导数会变小一点点。然后我想再梯度下降一步，在这个绿点，我自然会用一个稍微跟刚才在那个品红点时比，再小一点的一步，到了新的红色点，更接近全局最低点了，因此这点的导数会比在绿点时更小。所以，我再进行一步梯度下降时，我的导数项是更小的，${\\theta_{1}}$更新的幅度就会更小。所以随着梯度下降法的运行，你移动的幅度会自动变得越来越小，直到最终移动幅度非常小，你会发现，已经收敛到局部极小值。在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度，这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接近局部最低时，导数值会自动变得越来越小，所以梯度下降将自动采取较小的幅度，这就是梯度下降的做法。所以实际上没有必要再另外减小$a$。 Gradient Descent For Linear Regression【梯度下降的线性回归】 $\\frac{\\partial }{\\partial {{\\theta }_{j}}}J({{\\theta }_{0}},{{\\theta }_{1}})=\\frac{\\partial }{\\partial {{\\theta }_{j}}}\\frac{1}{2m}{{\\sum\\limits_{i=1}^{m}{\\left( {{h}_{\\theta }}({{x}^{(i)}})-{{y}^{(i)}} \\right)}}^{2}}$ $j=0$ 时：$\\frac{\\partial }{\\partial {{\\theta }_{0}}}J({{\\theta }_{0}},{{\\theta }_{1}})=\\frac{1}{m}{{\\sum\\limits_{i=1}^{m}{\\left( {{h}_{\\theta }}({{x}^{(i)}})-{{y}^{(i)}} \\right)}}}$ $j=1$ 时：$\\frac{\\partial }{\\partial {{\\theta }_{1}}}J({{\\theta }_{0}},{{\\theta }_{1}})=\\frac{1}{m}\\sum\\limits_{i=1}^{m}{\\left( \\left( {{h}_{\\theta }}({{x}^{(i)}})-{{y}^{(i)}} \\right)\\cdot {{x}^{(i)}} \\right)}$ 则算法改写成： Repeat { ​ ${\\theta_{0}}:={\\theta_{0}}-a\\frac{1}{m}\\sum\\limits_{i=1}^{m}{ \\left({{h}_{\\theta }}({{x}^{(i)}})-{{y}^{(i)}} \\right)}$ ​ ${\\theta_{1}}:={\\theta_{1}}-a\\frac{1}{m}\\sum\\limits_{i=1}^{m}{\\left( \\left({{h}_{\\theta }}({{x}^{(i)}})-{{y}^{(i)}} \\right)\\cdot {{x}^{(i)}} \\right)}$ ​ } 在梯度下降中会一步步逼近代价函数最小的值","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Gowi"}},{"title":"吴恩达机器学习第一章【Introduction】","slug":"Introduction","date":"2020-02-06T04:58:21.048Z","updated":"2020-02-06T04:58:21.048Z","comments":true,"path":"2020/02/06/Introduction/","link":"","permalink":"http://uscair.club/2020/02/06/Introduction/","excerpt":"","text":"Machine Learning机器学习所研究的主要内容，是关于计算机上从数据中产生“模型”（model）的算法，即“学习算法”（learning algorithm），有了学习算法，我们把经验数据提供给它，它就能基于这些数据产生模型；面对新的情况时，模型会给我们提供相应的判断。其中从数据中学得模型的过程称为称为“训练”（training）或“学习”（learning） 123graph LR机器学习--有标记信息--&gt;监督学习机器学习--无标记信息--&gt;无监督学习 机器学习的目标是使学得的模型能很好的适应于“新样本”，而不是在新样本上工作的好好的，学得的模型适用于新样本的能力，称为“泛化”能力。 Supervised Learning【监督学习】定义：根据已有的数据集，知道输入和输出结果之间的关系。根据这种已知的关系，训练得到一个最优的模型。也就是说，在监督学习中训练数据==既有特征(feature)又有标签(label)==，通过训练，让机器可以自己找到特征和标签之间的联系，在面对只有特征没有标签的数据时，可以判断出标签。 监督学习的分类：回归(Regression）、分类（Classification) 回归问题：针对连续型问题 回归通俗一点就是，对已经存在的点（训练数据）进行分析，拟合出适当的函数模型y=f(x)，这里y就是数据的标签，而对于一个新的自变量x，通过这个函数模型得到标签y。 分类问题：针对离散型问题 Unsupervised Learning【无监督学习】定义：我们不知道数据集中数据、特征之间的关系，而是要根据聚类或一定的模型得到数据之间的关系。 可以这么说，比起监督学习，无监督学习更像是自学，让机器学会自己做事情，是没有标签（label）的。我们只是给定了一组数据，我们的目标是发现这组数据中的特殊结构。例如我们使用无监督学习算法会将这组数据分成两个不同的簇,，这样的算法就叫聚类算法。 Answer : B、C","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习基础","slug":"机器学习基础","permalink":"http://uscair.club/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"}],"author":{"name":"Gowi"}},{"title":"博客模板","slug":"博客模板","date":"2020-02-05T16:00:00.000Z","updated":"2020-02-05T16:00:00.000Z","comments":true,"path":"2020/02/06/博客模板/","link":"","permalink":"http://uscair.club/2020/02/06/%E5%8D%9A%E5%AE%A2%E6%A8%A1%E6%9D%BF/","excerpt":"模板格式","text":"模板格式 -— title: 文章标题 date: 2019-08-18 author: &nbsp;&nbsp;name: 作者名 categories: &nbsp;&nbsp;-&nbsp;数字图像处理 #分类 tags: &nbsp;&nbsp;-&nbsp;OpenCV #标签 music: &nbsp;&nbsp;enable: true # true（文章内和文章列表都显示） internal（只在文章内显示） &nbsp;&nbsp;server: netease # netease（网易云音乐）tencent（QQ音乐） xiami（虾米） kugou（酷狗） &nbsp;&nbsp;type: song # song （单曲） album （专辑） playlist （歌单） search （搜索） &nbsp;&nbsp;id: 1321385758 # 歌曲/专辑/歌单 ID mathjax: true #博客内有公式要加上 -— 摘要 &lt;!-- more --&gt; (上为摘要，下为正文) 正文 将需要放大预览的图片用 &lt;fancybox&gt; &lt;\\fancybox&gt; 包含起来。 音乐id获取方法：eg: 网页版网易云搜索歌曲 如图（可能出现：“由于版权问题无法生成外链，建议换一首没有版权限制的”） markdown编辑器：typora 关于markdown加载图片：推荐使用图床(https://zhuanlan.zhihu.com/p/35270383?ivk_sa=1023345p) 填入图床连接 关于markdown数学公式可以使用mathjax(https://www.jianshu.com/p/a0aa94ef8ab2)","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://uscair.club/categories/Hexo/"}],"tags":[{"name":"模板","slug":"模板","permalink":"http://uscair.club/tags/%E6%A8%A1%E6%9D%BF/"}]},{"title":"支持向量机(SVM)","slug":"支持向量机-SVM","date":"2020-01-23T08:16:00.000Z","updated":"2020-01-23T08:16:00.000Z","comments":true,"path":"2020/01/23/支持向量机-SVM/","link":"","permalink":"http://uscair.club/2020/01/23/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA-SVM/","excerpt":"2020/01/23","text":"2020/01/23 支持向量机（Support vector machines）一、简介支持向量机（support vector machines）是一种二分类模型，它的目的是寻找一个超平面来对样本进行分割，分割的原则是间隔最大化，最终转化为一个凸二次规划问题来求解。由简至繁的模型包括： 当训练样本线性可分时，通过硬间隔最大化，学习一个线性可分支持向量机； 当训练样本近似线性可分时，通过软间隔最大化，学习一个线性支持向量机； 当训练样本线性不可分时，通过核技巧和软间隔最大化，学习一个非线性支持向量机； 与逻辑回归和神经网络相比，支持向量机，或者简称SVM，在学习复杂的非线性方程时提供了一种更为清晰，更加强大的方式。 二、SVM 与 Logistic regression逻辑回归预测函数： 现在考虑下我们想要逻辑回归做什么：当 y=1 时， 我们需要预测函数 h(x)≈1, 需要 Z &gt;= 0当 y=0 时， 我们需要预测函数 h(x)≈0, 需要 Z &lt;= 0则对应的代价函数(z = theta.T * x) 当y值不同时，J(z)函数的曲线可大致拟合成一条折线cost(z)。将逻辑回归中J(z)替换为拟合的这条折线cost(z)，我们得到一个新的最小化函数: 加入正则项，再让其在逻辑回归代价函数上面稍加变形，则得到了SVM的函数: 最后有别于逻辑回归输出的概率。在这里，我们的代价函数，当最小化代价函数，获得参数theta时，支持向量机所做的是它来直接预测y的值等于1，还是等于0。 三、SVM人们有时将支持向量机看作是大间距分类器。在训练得到最小化的theta过程中，先忽略参数C和正则项,则theta的变化方向是使得 当 y=1 时, z&gt;= 1 ，当 y=0 时, z&lt;=-1 （而不是逻辑回归中的0) 如果你考察这样一个数据集，其中有正样本，也有负样本，可以看到这个数据集是线性可分的。我的意思是，存在一条直线把正负样本分开。当然有多条不同的直线，可以把正样本和负样本完全分开。 这些决策边界看起来都不是特别好的选择，支持向量机将会选择这个黑色的决策边界，相较于之前我用粉色或者绿色画的决策界。这条黑色的看起来好得多，黑线看起来是更稳健的决策界。在分离正样本和负样本上它显得的更好。数学上来讲，这是什么意思呢？这条黑线有更大的距离，这个距离叫做间距(margin)。 当画出这两条额外的蓝线，我们看到黑色的决策界和训练样本之间有更大的最短距离。然而粉线和蓝线离训练样本就非常近，在分离样本的时候就会比黑线表现差。因此，这个距离叫做支持向量机的间距，而这是支持向量机具有鲁棒性的原因，因为它努力用一个最大间距来分离样本。因此支持向量机有时被称为大间距分类器。 参数C对划分的影响: C较大时，可能会导致过拟合,高方差 C较小时，可能会导致欠拟合,高偏差 例如：当 C较小时会得到黑线，而增大C使得C非常大时，会得到粉色线 关于SVM如何做到大间距分类这里先不解释。 四、核函数许多时候，我们面临的分类问题并不只是线性分类，还会遇到很多无法通过直线进行分隔的分类情况： 我们可以用一系列的新的特征f来替换模型中的每一项。将f代替x来对进行分类。而这个代替的变化函数则叫做核函数。例如： 这是一个高斯核函数(Gaussian Kernel)。其中l为landmark，为数据中的地标，使用数据与地标的距离大小计算用来取新的特征，距离越大获得的f值则越小，当距离为0时，f达到最大为1。例如在坐标中取3个地标: 这样得到的新特征与地标相关系，关联到数据与地标间的欧式距离，而训练出的theta也会通过这个核函数得到复杂的拟合边界。 其中高斯核函数中的参数 sigma 为用户定义的到达率，为核函数跌至0的速率参数 一般实现核函数SVM时使用的地标为整个数据集，即如果训练集有m个样本，则选取m个地标。 两个参数 C 和 sigma 的影响 C较大时，可能会导致过拟合,高方差 C较小时，可能会导致欠拟合,高偏差 sigma 较大时，可能导致低方差，高偏差 （欠拟合） sigma 较小时，可能导致低偏差，高方差 （过拟合） 除了高斯核函数外，还有很多其他的核函数，这里不一一介绍了。 这里只是初步对 SVM 作介绍和一些使用方法，其数学原理将在后续补充。 了解更多人工智能方面欢迎光顾个人博客： 戴挽舟的博客","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://uscair.club/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"AI大数据","slug":"AI大数据","permalink":"http://uscair.club/tags/AI%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"author":{"name":"戴挽舟（BbiHH）","url":"https://戴挽舟.fun"}},{"title":"Hello World","slug":"hello-world","date":"2020-01-13T08:55:07.598Z","updated":"2020-01-13T08:55:07.598Z","comments":true,"path":"2020/01/13/hello-world/","link":"","permalink":"http://uscair.club/2020/01/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://uscair.club/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://uscair.club/tags/test/"}]},{"title":"NAO机器人的小记","slug":"NAO机器人的小记","date":"2019-11-09T16:00:00.000Z","updated":"2019-11-09T16:00:00.000Z","comments":true,"path":"2019/11/10/NAO机器人的小记/","link":"","permalink":"http://uscair.club/2019/11/10/NAO%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E5%B0%8F%E8%AE%B0/","excerpt":"","text":"joint 摄像机相关参数 APIALAutonomousLife孤立状态solitary任何活动都可以通过ALAutonomousLifeProxy :: switchFocus（）启动。启动交互式Activity将切换到交互状态。在保障和禁用状态可以进入。无法停止自动启动板，其建议的活动将自动聚焦，可能会中断正在运行的活动。 交互状态interactive可以通过ALAutonomousLifeProxy :: switchFocus（）启动交互式活动聚焦新的交互式Activity将重新进入交互状态。孤立活动可能无法启动，这将导致孤立状态强制执行其规则并与用户创建不良生命周期。（这可能在未来发生变化）在保障和禁用状态可入以被输。自动启动板可以启动，它不会强制关注其建议。它不会中断正在运行的Activity。当整个交互活动堆栈退出时，将进入单独状态。当所有人都失去时，互动活动将被强行退出。（这尚未实施） 禁用状态disabled没有Activity可以通过ALAutonomousLifeProxy :: switchFocus（）启动无法启动自动启动板。该保障或交互状态可能无法进入。（可调用ALAutonomousLifeProxy :: setState（）退出此状态） 保护状态safeguard没有Activity可以通过ALAutonomousLifeProxy :: switchFocus（）启动 停止聚焦活动并清除堆栈。基本意识和呼吸服务如果正在运行则会停止。自动启动板已停止。然后处理反射。根据反射的结果，可以重新进入孤立状态。（对于损坏的硬件，机器人不会退出保护状态。对于过热，机器人在充分冷却后退出保护状态。） ALRobotPostureALRobotPostureProxy :: getPostureList std :: vector ALRobotPostureProxy :: getPostureList （） 返回：所有预定义姿势的矢量（名称） ALRobotPostureProxy :: getPosture std :: string ALRobotPostureProxy :: getPosture （） 返回当前预定义姿势的名称。如果当前姿势不在预定义姿势中，则返回“未知”。 ALRobotPostureProxy :: goToPosture bool ALRobotPostureProxy :: goToPosture （const std :: string postureName，const float speed ） 使机器人进入参数中要求的预定义姿势。可以修改移动的速度。移动是“智能的”：它将从机器人的开始姿势开始，并选择所有步骤以达到要求的姿势。这是一个阻塞调用。 ALMotionALMotionProxy :: setStiffnesses void ALMotionProxy :: setStiffnesses （const AL :: ALValue＆ names，const AL :: ALValue＆ stiffnesses ）设置一个或多个关节的刚度。这是一个非阻塞调用。names - 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称。stiffnesses - 零和一之间的一个或多个刚度。 示例：＃显示如何将刚度设置为1.0 。 ＃注意，这样做可能很危险，使用 ＃stiffnessInterpolation方法更安全，该方法需要持续时间参数。 names =’Body’ ＃如果只接收到一个参数，这将应用于所有关节 stiffnesses = 1.0 motionProxy.setStiffnesses(names, stiffnesses) ALMotionProxy :: getStiffnesses) std::vectorALMotionProxy::getStiffnesses(const AL::ALValue&amp; jointName)获取关节或关节组的刚度jointName - 关节，链，“Body”，“JointActuators”，“Joints”或“Actuators”的名称。返回：一个或多个刚度。1.0表示最大刚度。0.0表示最小刚度 ALMotionProxy :: angleInterpolation void ALMotionProxy :: angleInterpolation （const AL :: ALValue＆ names，const AL :: ALValue＆ angleLists，const AL :: ALValue＆ timeLists，const bool＆isAbsolute ）将一个或多个关节插值到目标角度或沿着定时轨迹。这是一个阻塞调用。names– 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称或名称。angleLists - 以弧度表示的角度，角度列表或角度列表列表timeLists - 时间，时间列表或时间列表列表，以秒为单位isAbsolute - 如果为true，则以绝对角度描述运动，否则角度相对于当前角度。 示例：＃显示一个关节的单个目标角度的示例 ＃在1.0秒内将头部偏航插入1.0弧度 names =“HeadYaw” angleLists = 50.0 * almath.TO_RAD timeLists = 1.0 isAbsolute = True motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute） ＃显示一个关节的单个轨迹的示例 ＃将头部偏航插入1.0弧度，并在2.0秒内回零 names =“HeadYaw” ＃2角度 angleLists = [30.0 * almath.TO_RAD，0.0] ＃ 2次 timeLists = [1.0,2.0] #后面的时间一定要比原来的大（timeLists = [1.0,1.0] 报错：times must be increasing 所以应该表示的是总的时间 在1s内转30度 在2s内转30度再转回来 即转回的时间也是1s） isAbsolute = True motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute） ＃显示多个轨迹的示例 names = [“HeadYaw”，“HeadPitch”] angleLists = [30.0 almath.TO_RAD，30.0 almath.TO_RAD] #左下方 timeLists = [1.0,1.2] #（可以为timeLists = [1.0,1.0]） isAbsolute = True motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute） ＃显示多个轨迹的示例 ＃将头部偏航插入1.0弧度，并在2.0秒内回零 ＃在长时间内上下插入HeadPitch。 names = [“HeadYaw”，“HeadPitch”] ＃每个关节可以有不同长度的列表，但数量 ＃角度和每个关节的次数必须相同。 ＃这里，第二个关节（“HeadPitch”）有三个角度，和 ＃三个相应的时间。 angleLists = [[50.0 almath.TO_RAD，0.0]， [-30.0 almath.TO_RAD，30.0 * almath.TO_RAD，0.0]] timeLists = [[1.0,2.0]，[1.0,2.0,3.0]] isAbsolute = True motionProxy.angleInterpolation（names，angleLists，timeLists，isAbsolute） ALMotionProxy :: angleInterpolationWithSpeed) void ALMotionProxy :: angleInterpolationWithSpeed （const AL :: ALValue＆ names，const AL :: ALValue＆targetAngles，const float＆maxSpeedFraction ）使用最大速度的一小部分将一个或多个关节插值到目标角度。每个关节只允许一个目标角度。这是一个阻塞调用。names - 关节，链条，“主体”，“JointActuators”，“接头”或“执行器”的名称或名称。targetAngles - 以弧度表示的角度或角度列表maxSpeedFraction - 一个分数 示例：＃显示一个关节的单个目标的示例 names =“HeadYaw” targetAngles = 1.0 maxSpeedFraction = 0.2＃使用最大关节速度的20％ motionProxy.angleInterpolationWithSpeed（names，targetAngles，maxSpeedFraction） ＃显示多个关节的示例 ＃而不是列出每个关节，您可以使用链名称 #bein扩展为包含链中的所有关节。在这种情况下， ＃“Head”将被解释为[“HeadYaw”，“HeadPitch”] names =“Head” ＃我们仍然需要指定正确的目标角度数 targetAngles = [0.5,0.25] maxSpeedFraction = 0.2＃使用最大关节速度的20％ motionProxy.angleInterpolationWithSpeed（names，targetAngles，maxSpeedFraction） ＃显示体零位置的示例 ＃而不是列出每个关节，您可以使用名称“Body” names =’Body’ ＃我们仍然需要指定正确的目标角度数，所以 ＃我们需要找到这个Nao的关节数量。 ＃这里我们使用getBodyNames方法，它告诉我们所有人 ＃别名“Body”中关节的名称。 ＃我们可以将此列表用于“names”参数。 numJoints = len(motionProxy.getBodyNames(“Body”)) ＃列出正确的长度。所有角度都为零。 targetAngles = [0.0] * numJoints ＃使用最大关节速度的10％ maxSpeedFraction = 0.1 motionProxy.angleInterpolationWithSpeed(names, targetAngles, maxSpeedFraction) ALMotionProxy :: move) void ALMotionProxy :: move （const float＆ x，const float＆ y，const float＆theta，const AL :: ALValue moveConfig ）1方法的重载使机器人以给定的速度移动，以FRAME_ROBOT表示，具有移动配置。这是一个非阻塞调用。x - 沿X轴的速度，以米/秒为单位。向后运动使用负值y - 沿Y轴的速度，以米/秒为单位。使用正值向左移动theta - 绕Z轴的速度，以弧度/秒为单位。使用负值顺时针旋转moveConfig - 具有自定义移动配置的ALValue。 ALMotionProxy :: moveTowardvoid ALMotionProxy :: moveToward （const float＆ x，const float＆ y，const float＆theta，const AL :: ALValue moveConfig ）使机器人以给定的标准化速度移动，以FRAME_ROBOT表示，具有移动配置。这是一个非阻塞调用。 x - 沿X轴标准化，无单位，速度。+1和-1分别对应于前向和后向的最大速度。y - 沿Y轴标准化，无单位，速度。+1和-1分别对应于左右方向上的最大速度。theta-标准化，无单位，绕Z轴的速度。+1和-1分别对应于逆时针和顺时针方向的最大速度moveConfig - 具有自定义移动配置的ALValue。 ＃示例显示moveToward的使用 ＃参数是最大值的分数 ＃这里我们要求全速前进 x = 1.0 y = 0.0 theta = 0.0 frequency = 1.0 motionProxy.moveToward(x, y, theta, [[“Frequency”, frequency]])＃如果我们不发送另一个命令，他将永远移动 ＃让我们让他慢下来（步长），并打开后3秒time.sleep(3) x = 0.5 theta = 0.6motionProxy.moveToward(x, y, theta, [[“Frequency”, frequency]]) ALMotionProxy :: setFootStepsWithSpeed) void ALMotionProxy :: setFootStepsWithSpeed （const std :: vector ＆ legName，const AL :: ALValue＆ footSteps，const std :: vector ＆ fractionMaxSpeed，const bool＆ clearExisting ）仅限NAO使机器人快速地做足步计划器。这是一个阻塞调用。legName - 要移动的腿的名称（’LLeg’or’RLeg’）footSteps - [x，y，theta]，[沿X / Y的位置，Z轴的方向]，相对于另一个腿，以[米，米，弧度]为单位。必须小于[MaxStepX，MaxStepY，MaxStepTheta]fractionMaxSpeed - 每步脚的速度。必须介于0和1之间clearExisting - 清除现有的脚步 ＃小步前进和逆时针用左脚 legName = [“LLeg”] X = 0.04 Y = 0.1 Theta = 0.3 footSteps = [[X, Y, Theta]] fractionMaxSpeed = [1.0] clearExisting = False motionProxy.setFootStepsWithSpeed(legName, footSteps, fractionMaxSpeed, clearExisting) ＃小步前进和逆时针用左脚 legName = [“LLeg”, “RLeg”] X = 0.04 Y = 0.1 Theta = 0.3 footSteps = [[X, Y, Theta], [X, -Y, Theta]] fractionMaxSpeed = [1.0, 1.0] clearExisting = FalsemotionProxy.setFootStepsWithSpeed(legName, footSteps, fractionMaxSpeed, clearExisting) ALMotionProxy :: waitUntilMoveIsFinished void ALMotionProxy :: waitUntilMoveIsFinished （） 等待MoveTask结束：此方法可用于阻止脚本/代码执行，直到完成移动任务。 ALMemoryALMemoryProxy :: getData ALMemoryProxy :: getDataList ALMemoryProxy :: declareEvent ALMemoryProxy :: insertData ALTrackerALTrackerProxy :: getActiveTarget ALTrackerProxy :: getMaximumDistanceDetection ALTrackerProxy::getMode ALTrackerProxy :: getRelativePosition ALTrackerProxy :: isNewTargetDetected ALTrackerProxy::isSearchEnabled ALTrackerProxy :: getTargetPosition ALTrackerProxy::isTargetLost ALTrackerProxy::setTimeOut ALVideoDeviceALVideoDeviceProxy :: getImagesRemote EventsALLandMarkDetection 结果变量的组织方式 ①如果未检测到Naomarks，则变量为空。更确切地说，它是一个零元素的数组（即在python中打印为[]） ②如果检测到N个Naomarks，则变量结构由两个字段组成：[[TimeStampField] [Mark_info_0，Mark_info_1 ,. 。。，Mark_info_N-1]]：A：TimeStampField = [TimeStamp_seconds，Timestamp_microseconds]。该字段是用于执行检测的图像的时间戳。B：Mark_info = [ShapeInfo，ExtraInfo]。对于每个检测到的标记，我们有一个Mark_info字段。B\\1 ShapeInfo = [1，alpha，beta，sizeX，sizeY，heading]。alpha和beta表示Naomark在摄像机角度方面的位置 - sizeX和sizeY是摄像机角度的标记大小 - 航向角描述了Naomark关于机器人头部的垂直轴方向。B\\2 ExtraInfo = [MarkID]。标记ID是写在Naomark上的编号，与其图案相对应。 ALRedBallDetection ALRedBallDetection基于摄像机给出的图像中红色像素的检测。这些像素根据它们与YUV颜色空间中的红色值的距离进行滤波，使用计算的阈值，即使在光照条件变化的情况下也可以进行检测。然后，从所有检测到的红色像素组中，仅保留定义圆形形状的红色像素。当在当前图像上找到一组像素时，将更新ALMemory键redBallDetected。 结果变量的组织形式 TimeStamp：此字段是用于执行检测的图像的时间戳 centerX和centerY是球的中心角度坐标（弧度）角度的原点是图像的中间。centerX 对应于沿Z轴的直接（逆时针）旋转，centerY对应于沿Y轴的直接旋转，如下图所示： sizeX和sizeY是球在角度（弧度）的球“水平和垂直半径 相关名词参考系 FRAME_TORSO：这是附加到机器人的躯干参考上的，因此机器人在走路时随其移动，在他倾斜时改变方向。当您执行非常局部的任务时（在躯干框架的方向上有意义），此空间很有用。 FRAME_ROBOT：这是围绕垂直Z轴投影的两只脚位置的平均值。该空间很有用，因为x轴始终向前，因此提供了一个以自我为中心的自然参考。 FRAME_WORLD：这是一个固定的原点，永远不会改变。当机器人行走时，它会被留下，并且在机器人转动之后z旋转会有所不同。此空间对于需要外部绝对参考框架的计算很有用。 执行任务时，空间是在任务开始时确定的，并且在其余的插值过程中始终保持不变。也就是说，插值一旦定义就不会随着腿的移动或躯干方向的变化而随着参考值的变化而变化。 刚度 阻塞方法与非阻塞方法 Position6DPosition6D是一个6维向量，由3个平移（以米为单位）和3个旋转（以弧度为单位）组成。 基于NAO机器人目标识别与定位算法 选自：柏雪峰,杨斌.基于NAO机器人目标识别与定位算法[J].成都信息工程学院学报,2014,29(06):625-629.","categories":[{"name":"NAO","slug":"NAO","permalink":"http://uscair.club/categories/NAO/"}],"tags":[{"name":"NAOqi","slug":"NAOqi","permalink":"http://uscair.club/tags/NAOqi/"}],"author":{"name":"Gowi"}},{"title":"OpenCV—Python:（二）视频","slug":"OpenCV——Python（二）视频","date":"2019-08-21T09:34:16.000Z","updated":"2019-08-21T09:34:16.000Z","comments":true,"path":"2019/08/21/OpenCV——Python（二）视频/","link":"","permalink":"http://uscair.club/2019/08/21/OpenCV%E2%80%94%E2%80%94Python%EF%BC%88%E4%BA%8C%EF%BC%89%E8%A7%86%E9%A2%91/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435#-*- coding:utf-8 -*-import numpy as npimport cv2 as cv#创建一个VideoCapture对象用于捕获视频，参数：设备索引或视频文件的名称cap=cv.VideoCapture(0) #0：调用电脑内置摄像头#定义编解码器并创建VideoWriter对象fourcc=cv.VideoWriter_fourcc(*\"DIVX\") #定义编码器（windows适用），可以(\"D\",\"I\",\"V\",\"X\")传输，也可以(*\"DIVX\")# &lt;VideoWriter object&gt; = cv.VideoWriter( filename, fourcc, fps, frameSize[, isColor]# filename 输出视频文件的名称。# fourcc 用于压缩帧的4字符编解码器# fps 创建的视频流的帧率。越大，保存的视频播放的越快，反之越慢。# frameSize 视频帧的大小。# isColor 如果它不为零，则编码器将期望并编码彩色帧，否则它将与灰度帧一起使用（该标志目前仅在Windows上受支持），默认值为Trueout=cv.VideoWriter(\"output.avi\",fourcc,50.0,(640,480),0) #True OR False 要与图像每一帧翻转时相对应，翻转灰度图用0，翻转彩图用1或者不填，默认为1'''out=cv.VideoWriter(\"output.avi\",fourcc,50.0,(640,480))'''#录制彩色视频while cap.isOpened(): ret,frame=cap.read() if not ret: print(\"Cannot receive frame (stream end?).Exiting...\") break frame=cv.flip(frame,1)#0图像是倒的，1图像是正的，0时图像原点为左上角，1时图像原点为左下角 gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY) # 将图像从一个颜色空间转换为另一个颜色空间，彩色转灰度 #写下翻转的帧 out.write(gray) '''out.write(frame)''' cv.imshow(\"frame\",frame) #frame显示原来彩图，gray显示变换后的灰度图 if cv.waitKey(1)==ord(\"q\"): #播放视频时，cv.waitKey()括号里的参数控制播放速度，0不播放；录制视频时，cv.waitKey()里的参数越大，捕获视频越慢 break#释放所有内容cap.release()out.release()cv.destroyAllWindows()","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://uscair.club/tags/OpenCV/"}],"author":{"name":"Adans"}},{"title":"OpenCV—Python:（一）图片的读取、显示、保存","slug":"opencv-read","date":"2019-08-18T09:34:16.000Z","updated":"2019-08-18T09:34:16.000Z","comments":true,"path":"2019/08/18/opencv-read/","link":"","permalink":"http://uscair.club/2019/08/18/opencv-read/","excerpt":"这篇文章描述了使用OpenCV进行图片的读取、显示、保存的方法。","text":"这篇文章描述了使用OpenCV进行图片的读取、显示、保存的方法。 图片的阅读、显示、保存：阅读：cv2.imread(“图片的路径”, 打开方式) 图片路径： 绝对路径：与代码不在同一目录里，写出详细地址，如“E:\\\\Photos\\\\aobing.jpg” 相对路径:代码相同目录中，只需写出图片名即可，如：“ao_bing.jpg” 注：不知道图片路径时，pycharm支持查看：点击图片文件名，单机单击鼠标右键， “Copy Path” 是绝对路径，”Copy Relative Path” 是相对路径! 打开方式： “ 1 “， 默认打开方式，加载彩色图像，任何图像的透明度都将忽略 “ 0 “， 加载灰度图像 “ -1 “，加载图像，包括alpha通道 显示：cv2.imshow(“窗口名称”，图片) 窗口名称：自己命名（不同的窗口使用不同的名称，但可以是同一张图片） 图片：打开图片时自己命名的变量,如 12#img即图片img=cv2.imread(\"ao_bing.jpg\") 保存：cv2.imwrite(“文件名”,要保存的图像) 总结：完整代码如下： 123456789101112131415161718192021222324#-*- coding:utf-8 -*-#也可以 import cv2 as cv ,使用时用cv代替cv2import cv2#宏定义文件名，便于修改filename=\"ao_bing.jpg\" #这里取的是相对路径#读入图片img=cv2.imread(filename) #默认打开，彩色图像img_gray=cv2.imread(filename,0)#灰度图打开，黑白图像#显示图片cv2.imshow(\"Img\",img)cv2.imshow(\"Img_gray\",img_gray)#使图片长时间停留，不闪退cv2.waitKey(0)#保存图片cv2.imwrite(\"ao_bing_gray.jpg\",img_gray)#摧毁所有窗口cv2.destroyAllWindows()","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://uscair.club/tags/OpenCV/"}],"author":{"name":"Adans"}},{"title":"openCV(色彩通道的分离与合并)","slug":"openCV-色彩通道的分离与合并","date":"2019-08-18T03:36:00.000Z","updated":"2019-08-18T03:36:00.000Z","comments":true,"path":"2019/08/18/openCV-色彩通道的分离与合并/","link":"","permalink":"http://uscair.club/2019/08/18/openCV-%E8%89%B2%E5%BD%A9%E9%80%9A%E9%81%93%E7%9A%84%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E5%B9%B6/","excerpt":"(原创)","text":"(原创) 本篇来看一下opencv的两个函数 通道cv2.split 和 通道cv2.merge 操作像素直接操作像素来分离通道得到单通道的灰度图 首先了解一下python中获取的图片信息 : 一张图片由[h*w]个像素构成，每个像素点有组成其颜色的参数，事实上就是BGR三通道的分量值 。 1234567891011121314151617#coding=utf-8import cv2import numpy as npfrom matplotlib import pyplot as pltimg = cv2.imread(\"D:\\图片\\Saved Pictures\\qianxun.jpg\",cv2.IMREAD_COLOR)#直接获取图片中通道的值b = img[:,:,0]g = img[:,:,1]r = img[:,:,2]cv2.imshow(\"blue\",b)cv2.imshow(\"green\",g)cv2.imshow(\"red\",r)cv2.waitKey(0) 函数实现通道拆分 cv2.split cv2.split(image) 将图片拆分成 B G R 三个通道(顺序就是为BGR)返回一个单通道的数组 (色彩图片是由三个数组构成，就是BGR三个通道的数组) 1234567891011121314151617#coding=utf-8# 导入库import cv2import numpy as npfrom matplotlib import pyplot as pltimg = cv2.imread(\"D:\\图片\\Saved Pictures\\qianxun.jpg\",cv2.IMREAD_COLOR)#通道分离b,g,r = cv2.split(img)cv2.imshow(\"Original\",img)cv2.imshow(\"Red\", r)cv2.imshow(\"Green\", g)cv2.imshow(\"Blue\", b)cv2.waitKey(0) 输出效果 为黑白灰度的单通道图片 cv2.split 函数分离得到各个通道的灰度值(单通道图像) 通道合并cv2.merge cv2.merge 将表颜色的数组合成构成图片， 参数为 [B,G,R] 若想得到色彩分离的图片(例如:红通道就变成只有红色合成的图片) ，实际上是在多通道下其他通道的分量值变为0。可以通过通道合并再将通道分量值取0。 123456789101112131415161718192021222324#coding=utf-8import cv2import numpy as npfrom matplotlib import pyplot as pltimg = cv2.imread(\"D:\\图片\\Saved Pictures\\qianxun.jpg\",cv2.IMREAD_COLOR)#通道分离b,g,r = cv2.split(img)cv2.imshow(\"Original\",img)cv2.imshow(\"Red\", r)cv2.imshow(\"Green\", g)cv2.imshow(\"Blue\", b)cv2.waitKey(0)# 生成一个值为0的单通道数组zeros = np.zeros(img.shape[:2], dtype = \"uint8\")# 分别扩展B、G、R成为三通道。另外两个通道用上面的值为0的数组填充cv2.imshow(\"blue\", cv2.merge([b, zeros, zeros]))cv2.imshow(\"green\", cv2.merge([zeros, g, zeros]))cv2.imshow(\"red\", cv2.merge([zeros, zeros, r]))cv2.waitKey(0) cv2 中不支持直接创建图片， 要依靠 np里面的初始化函数来生成一个图片数据组 ， 其初始化的数值为 0 。 效果如下 不同灰度图下的图片","categories":[{"name":"openCV","slug":"openCV","permalink":"http://uscair.club/categories/openCV/"},{"name":"图片变化","slug":"openCV/图片变化","permalink":"http://uscair.club/categories/openCV/%E5%9B%BE%E7%89%87%E5%8F%98%E5%8C%96/"}],"tags":[{"name":"Naoqi机器人","slug":"Naoqi机器人","permalink":"http://uscair.club/tags/Naoqi%E6%9C%BA%E5%99%A8%E4%BA%BA/"}],"author":{"name":"BbiHH"}},{"title":"Opencv——Python","slug":"Opencv的一些基操作——Python","date":"2019-08-17T09:23:13.000Z","updated":"2019-08-17T09:23:13.000Z","comments":true,"path":"2019/08/17/Opencv的一些基操作——Python/","link":"","permalink":"http://uscair.club/2019/08/17/Opencv%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%93%8D%E4%BD%9C%E2%80%94%E2%80%94Python/","excerpt":"","text":"Opencv——Python首先说一下Opencv是什么：Opencv是一个用图像处理、分析、机器视觉方面的开源数据库，是免费的。 我现在是刚开始学习opencv，而我现在所学习的语言是python语言，在遇到许多问题的时候百度，发现很多案例基本都是用c++写的，而我自己所学的c++没有学很好，所以造成许多需要慢慢探索、慢慢解决的问题。现在我把自己遇到的问题列出来供以后参考。 1.python的程序识别不了中文：通常python程序开头都会写注释 #--coding:utf-8 -- ，但是你可能运行的时候会发现识别不了中文，输出的中文会变成乱码，这是要将这个注释改成 #--coding:cp936 -- 这样就行了，而用opencv调取图片时，如果图片文件名是中文，也有可能识别不了，改成这样同样可以解决问题。2.图片调取代码： 123456789#-*-coding:cp936 -*-import cv2img&#x3D;cv2.imread(&quot;F:\\\\易烊千玺 .jpg&quot;)cv2.namedWindow(&quot;Image&quot;)cv2.imshow(&quot;Image&quot;,img)cv2.waitKey(0)cv2.destroyAllWindows() 运行结果：2.灰度化处理图片。代码： 12gray&#x3D;cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)cv2.imshow(&quot;gray_image&quot;,gray) 承接上一个代码，这样处理图片就会变为灰度图像3.对图像进行灰度变换。先把像素变成一个二维数组，再用函数进行处理代码： 12345678#对灰度图像进行y&#x3D;-x+255g&#x3D;copy.deepcopy(gray)rows&#x3D;img.shape[0]cols&#x3D;img.shape[1]for i in range(rows): for j in range(cols): g[i][j]&#x3D;255-g[i][j]cv2.imshow(&quot;g_image&quot;,g) 4.三色道直方图。代码： 12345678color&#x3D;(&#39;b&#39;,&#39;g&#39;,&#39;r&#39;)def image_hist(image): for i,col in enumerate(color): hist&#x3D;cv2.calcHist([image],[i],None,[256],[0,256]) plt.plot(hist,color&#x3D;col) plt.title(&quot;RGB&quot;) plt.xlim([0,256]) plt.show() 运行结果：这就是三色道直方图。5.灰度直方图。代码： 12plt.hist(gray.ravel(),255,[0,256])plt.show() 6.opencv中的createTrackbar函数。代码： 123456789101112131415161718192021#-*-coding:utf-8 -*-#使用opencv中的creatTrackbar函数来调节一些参数观察图像变化import cv2import numpy as np# 添加新窗口#读入原始图像cv2.namedWindow(&#39;image&#39;)filename &#x3D; &#39;F:\\\\jackson8.jpg&#39;img&#x3D;cv2.imread(filename)def turn(c): num&#x3D;cv2.getTrackbarPos(&quot;num&quot;,&quot;image&quot;) ret,thresh&#x3D; cv2.threshold(img,num,255,cv2.THRESH_BINARY) cv2.imshow(&#39;image&#39;,thresh)cv2.createTrackbar(&#39;num&#39;,&#39;image&#39;, 0,255,turn) # 创建滑块turn(0)cv2.waitKey(0)cv2.destroyAllWindows()","categories":[{"name":"数字图像处理","slug":"数字图像处理","permalink":"http://uscair.club/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://uscair.club/tags/OpenCV/"}],"author":{"name":"You_shuangshuang"}},{"title":"nao机器人的多线程编程","slug":"nao机器人","date":"2019-08-13T09:01:04.000Z","updated":"2019-08-13T09:01:04.000Z","comments":true,"path":"2019/08/13/nao机器人/","link":"","permalink":"http://uscair.club/2019/08/13/nao%E6%9C%BA%E5%99%A8%E4%BA%BA/","excerpt":"","text":"nao机器人的多线程编程首先，我在机器人编程这方面还是小白，不是很懂，如果有错误或者要补充的可以留言哦！ 什么是线程 线程：是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。 多线程：是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理（Chip-level multithreading）或同时多线程（Simultaneous multithreading）处理器。在一个程序中，这些独立运行的程序片段叫作“线程”（Thread），利用它编程的概念就叫作“多线程处理（Multithreading）”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程（台湾译作“执行绪”），进而提升整体处理性能。 这些都是专业解释，听起来比较抽象，更多的在于运用中去理解。 机器人在执行一个任务的同时，如果只用单线程，那不能同时执行别的任务。要实现nao机器人在走路的同时被摸了前额，机器人就停下来休息，我就遇到了这个问题。 在没有使用多线程的时候，机器人总是一直走下去，或者在刚开始的时候，还没有开始走就摸它的头，它会停下来休息。我本来一直以为是我在API的使用方面不对，后来才意识到机器人可能不能同时执行多个任务。 API上面的事件是可以直接用的，我现在才知道，开始我一直不知道怎么用，就仿照事件上的代码在写，发现又长又容易看 不懂。其实是可以直接用的，这样的代码比较简单。 接下来看实现机器人走路的同时被摸了一下就休息的代码 1234567891011121314151617181920212223242526272829303132# -*-encoding:UTF-8 -*-from nao import ALProxyrobotIP&#x3D;&quot;&quot;PORT&#x3D;9559import argparseimport mathimport threadingmotion&#x3D;ALProxy(&quot;ALMotion&quot;,robotIP,PORT)posture&#x3D;ALProxy(&quot;ALRobotPosture&quot;,robotIP,PORT)memory&#x3D;ALProxy(&quot;ALMemory&quot;,robotIP,PORT)config&#x3D;[] #这里可以自己设定参数def move(): motion.wakeUP() posture.goToPosture(&quot;StandInit&quot;,0.5) motion.moveTo(1.0,0.0,0.0,config)def Touch(): while Ture: front&#x3D;memory.getData(&quot;FrontTactilTouched&quot;) if front&#x3D;&#x3D;1: motion.rest() breakif _name_&#x3D;&quot;_main_&quot;: t1&#x3D;threading.Thread(target&#x3D;move) t2&#x3D;threading.Thread(target&#x3D;Touch) t1.start() t2.start() t1.join() t2.join() 这就是一个多线程编程","categories":[{"name":"NAO","slug":"NAO","permalink":"http://uscair.club/categories/NAO/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://uscair.club/tags/Python/"},{"name":"多线程","slug":"多线程","permalink":"http://uscair.club/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":{"name":"You_shuangshuang"}}]}